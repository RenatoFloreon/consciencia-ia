/**
 * @fileoverview Servi√ßo de integra√ß√£o com a OpenAI para gera√ß√£o de conte√∫do personalizado.
 * Gera as Cartas da Consci√™ncia, poesias e respostas de acompanhamento usando a API da OpenAI (GPT-4).
 */

const OpenAI = require('openai');
const config = require('../config/env');
const { logInfo, logError, logWarning } = require('../utils/logger');

// Inicializa√ß√£o do cliente OpenAI
let openai;
if (config.OPENAI_API_KEY) {
    openai = new OpenAI({
        apiKey: config.OPENAI_API_KEY,
        organization: config.OPENAI_ORGANIZATION
    });
}

/**
 * Gera a Carta da Consci√™ncia personalizada com base nos dados do usu√°rio e an√°lise de perfil (se houver).
 * @param {Object} userData - Dados do usu√°rio (nome, email, desafios, etc).
 * @param {Object|null} profileAnalysis - Resultados da an√°lise de perfil (ou null se n√£o houver perfil).
 * @returns {Promise<Object|null>} Objeto contendo a carta gerada (fullLetter, poetry, isGeneric) ou null em caso de erro.
 */
const generateConscienceLetter = async (userData, profileAnalysis) => {
    logInfo('LETTER_GENERATION', `Gerando Carta de Consci√™ncia para ${userData.name}`);
    try {
        if (!openai) {
            logError('LETTER_GENERATION', 'OpenAI n√£o inicializada. N√£o √© poss√≠vel gerar a carta.');
            return null;
        }
        // Verificar dados m√≠nimos necess√°rios
        if (!userData.name) {
            logWarning('LETTER_GENERATION', 'Nome do usu√°rio n√£o fornecido, abortando gera√ß√£o.');
            return null;
        }

        // Preparar desafios com valores padr√£o se n√£o informados
        const businessChallenge = userData.businessChallenge || "crescimento nos neg√≥cios";
        const personalChallenge = userData.personalChallenge || "equil√≠brio pessoal";

        // Verificar se h√° an√°lise de perfil dispon√≠vel
        const hasProfileAnalysis = profileAnalysis && (profileAnalysis.deepInsights || profileAnalysis.gptAnalysis);

        // Montar o prompt detalhado para o modelo GPT-4
        let letterPrompt = `
            Voc√™ √© o Conselheiro da Consci√™nc.IA, um assistente virtual especial criado para o evento MAPA DO LUCRO.
            
            Sua miss√£o √© gerar uma Carta de Consci√™ncia **profundamente personalizada** para ${userData.name}, baseada na an√°lise do perfil digital e nos desafios compartilhados.
            
            **Instru√ß√µes para a Carta (tom inspirador, pessoal e impactante):**
            
            A carta deve ser EXTREMAMENTE PERSONALIZADA, visceral e emocionalmente impactante, tocando em pontos t√£o profundos e espec√≠ficos que ${userData.name} ficar√° genuinamente surpreso(a) e at√© um pouco assustado(a) com a precis√£o e os insights revelados. Deve parecer quase "sobrenatural" em sua capacidade de revelar verdades ocultas sobre a pessoa.
            
            **DADOS DO USU√ÅRIO:**
            Nome: ${userData.name}
            Desafio nos Neg√≥cios: ${businessChallenge}
            Desafio Pessoal: ${personalChallenge}
            ${hasProfileAnalysis && profileAnalysis.deepInsights ? `INSIGHTS PROFUNDOS DA AN√ÅLISE:
            ${profileAnalysis.deepInsights}` : ''}
            ${hasProfileAnalysis && profileAnalysis.gptAnalysis ? `AN√ÅLISE GPT DO PERFIL:
            ${profileAnalysis.gptAnalysis}` : ''}
            ${hasProfileAnalysis && profileAnalysis.scrapedData ? `DADOS EXTRA√çDOS DO PERFIL:
            ${JSON.stringify(profileAnalysis.scrapedData, null, 2)}` : ''}
            
            **ESTRUTURA DA CARTA:**
            1. **Sauda√ß√£o personalizada e emocional** ‚Äì Estabelecer conex√£o imediata, usando o nome (Ex.: "üíå Querido(a) [Nome], hoje estou aqui apenas para falar diretamente contigo e com a Alma do seu Neg√≥cio üíå").
            2. **‚ú® Perfil Comportamental (Insight de Consci√™ncia) ‚ú®** ‚Äì An√°lise profundamente personalizada do perfil digital, destacando padr√µes comportamentais √∫nicos. Mencionar pelo menos 5 elementos *extremamente espec√≠ficos* observados (ex.: posts, imagens, linguagem, interesses). Revelar "segredos despercebidos" ‚Äì coisas que a pr√≥pria pessoa talvez n√£o perceba, mas que s√£o evidentes na an√°lise. Relacionar com o conceito de Ikigai (onde paix√£o, miss√£o, voca√ß√£o e profiss√£o se encontram). Usar met√°foras poderosas e linguagem visceral que toque a alma. Incluir pelo menos 3 observa√ß√µes t√£o espec√≠ficas que causem surpresa genu√≠na, usando emojis para impacto emocional.
            3. **üöÄ Dicas Pr√°ticas de Uso de IA nos Neg√≥cios üöÄ** ‚Äì Listar 3 ferramentas de IA espec√≠ficas que podem ajudar com o desafio de neg√≥cios mencionado. Para cada ferramenta: nome, breve descri√ß√£o e (se poss√≠vel) link. Explicar como cada uma pode resolver *especificamente* o desafio de ${businessChallenge}. Formatar como lista numerada (1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£).
            4. **üí´ Dicas Pr√°ticas de Uso de IA na Vida Pessoal üí´** ‚Äì Listar 3 ferramentas de IA espec√≠ficas que podem ajudar com o desafio pessoal mencionado. Seguir o mesmo formato (nome, descri√ß√£o, link) explicando como ajudam com *exatid√£o* no desafio de ${personalChallenge}. Formatar como lista numerada (1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£).
            5. **üß≠ Recomenda√ß√µes de Ouro üß≠** ‚Äì Conselhos profundamente personalizados baseados em tudo que foi analisado. Mencionar o M√©todo S.I.M. e o conceito de Ikigai como filosofias complementares para o crescimento do ${userData.name}. Incluir links para https://www.instagram.com/metodosimbrasil/ e https://www.instagram.com/coworkingikigai/. Oferecer insights transformadores que pare√ßam "ler a mente" do destinat√°rio.
            6. **üí´ P√≠lula de Inspira√ß√£o (Poesia Individualizada) üí´** ‚Äì Uma poesia **profundamente emocional e personalizada**, que inclua elementos espec√≠ficos da vida/perfil de ${userData.name}. Usar met√°foras relacionadas aos interesses/paix√µes identificados. Formato livre, mas deve ter forte impacto emocional e inspirar. Usar emojis para aumentar o impacto.
            7. **Encerramento inspirador** ‚Äì Fechamento da carta com palavras finais encorajadoras e uma chamada para a√ß√£o (ex.: convidar para refletir, participar do programa, etc).
            
            **Diretrizes Cruciais:**
            - Usar **ABUND√ÇNCIA de emojis** de forma estrat√©gica para criar impacto visual e emocional.
            - A carta deve realmente parecer quase sobrenatural de t√£o precisa e personalizada.
            - Linguagem visceral, **met√°foras poderosas** e insights **profundos** ao longo do texto.
            - Mencionar detalhes **extremamente espec√≠ficos** do perfil analisado (posts, fotos, interesses etc.).
            - A poesia deve ser √∫nica e tocante ‚Äì **nada gen√©rico**.
            - Manter tom inspirador, com profundidade psicol√≥gica.
            - Integrar elementos do M√©todo S.I.M. e Ikigai conforme orientado.
        `;

        // Chamada √† API OpenAI para gerar a carta (GPT-4)
        const letterResponse = await openai.chat.completions.create({
            model: "gpt-4-turbo",
            messages: [
                { 
                    role: "system", 
                    content: "Voc√™ √© o Conselheiro da Consci√™nc.IA, um assistente virtual que gera Cartas de Consci√™ncia profundamente personalizadas, emocionais e transformadoras. Sua especialidade √© criar conte√∫do com precis√£o quase sobrenatural, tocando pontos profundos da consci√™ncia das pessoas e revelando verdades ocultas de forma surpreendente." 
                },
                { 
                    role: "user", 
                    content: letterPrompt 
                }
            ],
            max_tokens: 3000,
            temperature: 0.8,
            presence_penalty: 0.3,
            frequency_penalty: 0.2
        });

        const letterContent = letterResponse.choices[0].message.content;

        // Extrair a poesia da carta para refer√™ncia separada (se necess√°rio)
        let poetry = "";
        if (letterContent.includes("üí´ P√çLULA DE INSPIRA√á√ÉO")) {
            const parts = letterContent.split("üí´ P√çLULA DE INSPIRA√á√ÉO");
            if (parts[1]) {
                poetry = parts[1].trim();
            }
        }

        // Montar objeto de resultado
        const result = {
            fullLetter: letterContent,
            poetry: poetry,
            isGeneric: !hasProfileAnalysis,
            timestamp: new Date().toISOString()
        };
        logInfo('LETTER_GENERATION', `Carta gerada com sucesso para ${userData.name}`);
        return result;
    } catch (error) {
        logError('LETTER_GENERATION', 'Erro na gera√ß√£o da carta pela OpenAI', error);
        return null;
    }
};

/**
 * Gera uma poesia personalizada (n√£o utilizada no fluxo principal atual).
 * @param {Object} userData 
 * @param {Object|null} profileAnalysis 
 */
const generatePersonalizedPoetry = async (userData, profileAnalysis = null) => {
    logInfo('POETRY_GENERATION', `Gerando poesia personalizada para ${userData.name}`);
    try {
        if (!openai) {
            logError('POETRY_GENERATION', 'OpenAI n√£o inicializada.');
            return null;
        }
        // (Implementa√ß√£o similar √† carta, se necess√°rio)
        return null;
    } catch (error) {
        logError('POETRY_GENERATION', 'Erro ao gerar poesia', error);
        return null;
    }
};

/**
 * Gera resposta a uma pergunta de acompanhamento com base na carta e dados do usu√°rio.
 * @param {string} question - Pergunta do usu√°rio ap√≥s ler a carta.
 * @param {Object} userData - Dados do usu√°rio (incluindo letterData).
 * @param {Object} letterData - Dados da carta gerada (conte√∫do completo, etc).
 * @returns {Promise<string|null>} Resposta gerada para a pergunta ou null se falhar.
 */
const answerFollowUpQuestion = async (question, userData, letterData) => {
    logInfo('FOLLOWUP_QUESTION', `Processando pergunta de acompanhamento: "${question}"`);
    try {
        if (!openai) {
            logError('FOLLOWUP_QUESTION', 'OpenAI n√£o inicializada. N√£o √© poss√≠vel responder √† pergunta.');
            return null;
        }

        // Montar contexto com a carta previamente gerada e a pergunta do usu√°rio
        const assistantPersonality = "Voc√™ √© o Conselheiro da Consci√™nc.IA, especializado em fornecer respostas profundas baseadas na Carta de Consci√™ncia.";
        const userPrompt = `
            CARTA DA CONSCI√äNCIA (contexto):
            ${letterData.fullLetter}
            
            PERGUNTA DO USU√ÅRIO:
            ${question}
            
            Responda √† pergunta do usu√°rio de forma atenciosa, fazendo refer√™ncias √† carta acima quando poss√≠vel. Seja breve, emp√°tico e forne√ßa orienta√ß√£o pr√°tica se aplic√°vel.
        `;

        const followUpResponse = await openai.chat.completions.create({
            model: "gpt-4-turbo",
            messages: [
                { role: "system", content: assistantPersonality },
                { role: "user", content: userPrompt }
            ],
            max_tokens: 1000,
            temperature: 0.7
        });

        const answer = followUpResponse.choices[0].message.content;
        logInfo('FOLLOWUP_QUESTION', 'Resposta de acompanhamento gerada com sucesso');
        return answer;
    } catch (error) {
        logError('FOLLOWUP_QUESTION', 'Erro ao gerar resposta de acompanhamento', error);
        return null;
    }
};

module.exports = {
    generateConscienceLetter,
    generatePersonalizedPoetry,
    answerFollowUpQuestion
};
