<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    <style>
        :root {
            --primary-color: #6a11cb;
            --secondary-color: #2575fc;
            --accent-color: #ff6b6b;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --info-color: #17a2b8;
            --danger-color: #dc3545;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f7fa;
            min-height: 100vh;
            display: flex;
        }
        
        /* Sidebar */
        .sidebar {
            width: 250px;
            background: var(--primary-color);
            color: white;
            min-height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            bottom: 0;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
            z-index: 100;
        }
        
        .sidebar-header {
            padding: 1.5rem 1rem;
            font-weight: 700;
            font-size: 1.25rem;
            letter-spacing: 1px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .sidebar-menu {
            padding: 1rem 0;
        }
        
        .sidebar-menu a {
            display: block;
            padding: 0.75rem 1.5rem;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: all 0.3s ease;
        }
        
        .sidebar-menu a:hover, .sidebar-menu a.active {
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }
        
        .sidebar-menu i {
            margin-right: 0.5rem;
            width: 20px;
            text-align: center;
        }
        
        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 250px;
            padding: 2rem;
        }
        
        .page-header {
            margin-bottom: 2rem;
        }
        
        /* Cards */
        .stats-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            text-align: center;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        }
        
        .stat-card.purple {
            background: var(--primary-color);
            color: white;
        }
        
        .stat-card.green {
            background: var(--success-color);
            color: white;
        }
        
        .stat-card.blue {
            background: var(--info-color);
            color: white;
        }
        
        .stat-card.yellow {
            background: var(--warning-color);
            color: #212529;
        }
        
        .stat-card i {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            opacity: 0.8;
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .stat-label {
            font-size: 1rem;
            opacity: 0.8;
        }
        
        /* Table */
        .data-table-container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .table-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }
        
        .table-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        .table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }
        
        .table th {
            background: #f8f9fa;
            padding: 1rem;
            font-weight: 600;
            text-align: left;
            border-bottom: 2px solid #dee2e6;
        }
        
        .table td {
            padding: 1rem;
            border-bottom: 1px solid #dee2e6;
            vertical-align: middle;
        }
        
        .table tr:last-child td {
            border-bottom: none;
        }
        
        .table tr:hover {
            background: #f8f9fa;
        }
        
        .badge-completed {
            background: var(--success-color);
            color: white;
            padding: 0.35rem 0.65rem;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .badge-pending {
            background: var(--warning-color);
            color: #212529;
            padding: 0.35rem 0.65rem;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }
        
        .btn-action {
            width: 32px;
            height: 32px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .btn-view {
            background: var(--info-color);
        }
        
        .btn-download {
            background: var(--primary-color);
        }
        
        .btn-action:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }
        
        /* Pagination */
        .pagination-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 1rem;
        }
        
        /* Modal */
        .modal-content {
            border-radius: 10px;
            border: none;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        
        .modal-header {
            background: var(--primary-color);
            color: white;
            border-radius: 10px 10px 0 0;
        }
        
        .modal-title {
            font-weight: 600;
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .detail-section {
            margin-bottom: 1.5rem;
        }
        
        .detail-title {
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--primary-color);
        }
        
        /* Responsive */
        @media (max-width: 992px) {
            .sidebar {
                width: 200px;
            }
            
            .main-content {
                margin-left: 200px;
            }
        }
        
        @media (max-width: 768px) {
            body {
                display: block;
            }
            
            .sidebar {
                width: 100%;
                position: relative;
                min-height: auto;
            }
            
            .main-content {
                margin-left: 0;
                padding: 1rem;
            }
            
            .stats-cards {
                grid-template-columns: 1fr;
            }
            
            .table-responsive {
                overflow-x: auto;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <i class="bi bi-braces"></i> Consciênc.IA Admin
        </div>
        <div class="sidebar-menu">
            <a href="#" class="active">
                <i class="bi bi-speedometer2"></i> Dashboard
            </a>
            <a href="/admin/export/json">
                <i class="bi bi-filetype-json"></i> Exportar JSON
            </a>
            <a href="/admin/export/csv">
                <i class="bi bi-filetype-csv"></i> Exportar CSV
            </a>
            <a href="/admin/logout">
                <i class="bi bi-box-arrow-right"></i> Sair
            </a>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="page-header">
            <h1>Dashboard</h1>
        </div>

        <!-- Stats Cards -->
        <div class="stats-cards">
            <div class="stat-card purple">
                <i class="bi bi-people-fill"></i>
                <div class="stat-value" id="total-interactions">--</div>
                <div class="stat-label">Total de Interações</div>
            </div>
            <div class="stat-card green">
                <i class="bi bi-envelope-paper-fill"></i>
                <div class="stat-value" id="letters-delivered">--</div>
                <div class="stat-label">Cartas Entregues</div>
            </div>
            <div class="stat-card blue">
                <i class="bi bi-hourglass-split"></i>
                <div class="stat-value" id="profiles-analyzed">--</div>
                <div class="stat-label">Perfis Analisados</div>
            </div>
            <div class="stat-card yellow">
                <i class="bi bi-chat-dots-fill"></i>
                <div class="stat-value" id="followup-questions">--</div>
                <div class="stat-label">Perguntas de Acompanhamento</div>
            </div>
        </div>

        <!-- Users Table -->
        <div class="data-table-container">
            <div class="table-header">
                <h2 class="table-title">Lista de Usuários</h2>
                <div class="table-actions">
                    <input type="text" id="search-input" class="form-control" placeholder="Buscar...">
                    <select id="filter-type" class="form-select">
                        <option value="all">Todos os estados</option>
                        <option value="completed">Concluídos</option>
                        <option value="pending">Pendentes</option>
                    </select>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table" id="users-table">
                    <thead>
                        <tr>
                            <th>Nome</th>
                            <th>Telefone</th>
                            <th>Email</th>
                            <th>Instagram</th>
                            <th>Desafio Negócio</th>
                            <th>Desafio Pessoal</th>
                            <th>Estado</th>
                            <th>Início</th>
                            <th>Conclusão</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="users-data">
                        <tr>
                            <td colspan="10" class="text-center">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Carregando...</span>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="pagination-container">
                <div>
                    <span id="showing-entries">Mostrando 0 de 0 registros</span>
                </div>
                <button id="load-more" class="btn btn-primary" disabled>
                    Carregar Mais
                </button>
            </div>
        </div>
    </div>

    <!-- Modal de Detalhes -->
    <div class="modal fade" id="detailsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Detalhes da Interação</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="modal-content">
                    <!-- Conteúdo preenchido via JavaScript -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Variáveis globais
        let allInteractions = [];
        let filteredInteractions = [];
        let currentPage = 1;
        const pageSize = 10;
        
        // Inicialização
        document.addEventListener('DOMContentLoaded', function() {
            fetchData();
            
            // Event listeners
            document.getElementById('search-input').addEventListener('input', filterInteractions);
            document.getElementById('filter-type').addEventListener('change', filterInteractions);
            document.getElementById('load-more').addEventListener('click', loadMoreInteractions);
        });
        
        // Buscar dados da API
        async function fetchData() {
            try {
                const response = await fetch('/admin/api/interactions');
                if (!response.ok) {
                    throw new Error('Erro ao buscar dados');
                }
                
                allInteractions = await response.json();
                filteredInteractions = [...allInteractions];
                
                // Carregar estatísticas
                fetchStats();
                
                // Renderizar tabela inicial
                renderInteractionsTable();
                
            } catch (error) {
                console.error('Erro:', error);
                document.getElementById('users-data').innerHTML = `
                    <tr>
                        <td colspan="10" class="text-center text-danger">
                            <i class="bi bi-exclamation-triangle"></i> Erro ao carregar dados. Tente novamente mais tarde.
                        </td>
                    </tr>
                `;
            }
        }
        
        // Buscar estatísticas
        async function fetchStats() {
            try {
                const response = await fetch('/admin/api/stats');
                if (!response.ok) {
                    throw new Error('Erro ao buscar estatísticas');
                }
                
                const stats = await response.json();
                
                // Atualizar cards de estatísticas
                document.getElementById('total-interactions').textContent = stats.totalInteractions;
                document.getElementById('letters-delivered').textContent = stats.letterDelivered;
                document.getElementById('profiles-analyzed').textContent = stats.profilesAnalyzed;
                document.getElementById('followup-questions').textContent = stats.followupQuestions;
                
            } catch (error) {
                console.error('Erro ao carregar estatísticas:', error);
            }
        }
        
        // Renderizar tabela de interações
        function renderInteractionsTable() {
            const tableBody = document.getElementById('users-data');
            const start = 0;
            const end = Math.min(pageSize, filteredInteractions.length);
            
            if (filteredInteractions.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="10" class="text-center">
                            Nenhum registro encontrado
                        </td>
                    </tr>
                `;
                document.getElementById('showing-entries').textContent = `Mostrando 0 de 0 registros`;
                document.getElementById('load-more').disabled = true;
                return;
            }
            
            let html = '';
            for (let i = start; i < end; i++) {
                const interaction = filteredInteractions[i];
                html += createTableRow(interaction, i);
            }
            
            tableBody.innerHTML = html;
            
            // Atualizar contador e botão de carregar mais
            document.getElementById('showing-entries').textContent = `Mostrando ${end} de ${filteredInteractions.length} registros`;
            document.getElementById('load-more').disabled = end >= filteredInteractions.length;
            
            // Adicionar event listeners para os botões de detalhes
            document.querySelectorAll('.btn-view').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = this.getAttribute('data-index');
                    showInteractionDetails(filteredInteractions[index]);
                });
            });
        }
        
        // Criar linha da tabela
        function createTableRow(interaction, index) {
            const date = new Date(interaction.timestamp || Date.now());
            const startDate = interaction.startTimestamp ? new Date(interaction.startTimestamp) : date;
            const formattedStartDate = formatDate(startDate);
            const formattedEndDate = interaction.type === 'letter_delivered' ? formatDate(date) : '-';
            
            // Extrair perfil do Instagram da URL
            let instagramProfile = '-';
            if (interaction.profileUrl && interaction.profileUrl.includes('instagram.com')) {
                const match = interaction.profileUrl.match(/instagram\.com\/([^\/\?]+)/);
                instagramProfile = match ? match[1] : '-';
            }
            
            // Estado da interação
            let statusBadge = '';
            if (interaction.type === 'letter_delivered') {
                statusBadge = '<span class="badge-completed">COMPLETED</span>';
            } else {
                statusBadge = '<span class="badge-pending">PENDING</span>';
            }
            
            return `
                <tr>
                    <td>${interaction.name || '-'}</td>
                    <td>${interaction.phoneNumber || '-'}</td>
                    <td>${interaction.email || '-'}</td>
                    <td>${instagramProfile}</td>
                    <td>${interaction.businessChallenge || '-'}</td>
                    <td>${interaction.personalChallenge || '-'}</td>
                    <td>${statusBadge}</td>
                    <td>${formattedStartDate}</td>
                    <td>${formattedEndDate}</td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn-action btn-view" data-index="${index}">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn-action btn-download" onclick="downloadInteraction(${index})">
                                <i class="bi bi-file-earmark-text"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        }
        
        // Formatar data
        function formatDate(date) {
            return date.toLocaleDateString('pt-BR') + ', ' + 
                   date.toLocaleTimeString('pt-BR', {hour: '2-digit', minute:'2-digit'});
        }
        
        // Filtrar interações
        function filterInteractions() {
            const searchTerm = document.getElementById('search-input').value.toLowerCase();
            const filterType = document.getElementById('filter-type').value;
            
            filteredInteractions = allInteractions.filter(interaction => {
                // Filtrar por estado
                if (filterType === 'completed' && interaction.type !== 'letter_delivered') {
                    return false;
                }
                if (filterType === 'pending' && interaction.type === 'letter_delivered') {
                    return false;
                }
                
                // Filtrar por termo de busca
                if (searchTerm) {
                    return (
                        (interaction.name && interaction.name.toLowerCase().includes(searchTerm)) ||
                        (interaction.email && interaction.email.toLowerCase().includes(searchTerm)) ||
                        (interaction.phoneNumber && interaction.phoneNumber.includes(searchTerm)) ||
                        (interaction.businessChallenge && interaction.businessChallenge.toLowerCase().includes(searchTerm)) ||
                        (interaction.personalChallenge && interaction.personalChallenge.toLowerCase().includes(searchTerm))
                    );
                }
                
                return true;
            });
            
            currentPage = 1;
            renderInteractionsTable();
        }
        
        // Carregar mais interações
        function loadMoreInteractions() {
            const tableBody = document.getElementById('users-data');
            const start = currentPage * pageSize;
            const end = Math.min(start + pageSize, filteredInteractions.length);
            
            let html = tableBody.innerHTML;
            for (let i = start; i < end; i++) {
                const interaction = filteredInteractions[i];
                html += createTableRow(interaction, i);
            }
            
            tableBody.innerHTML = html;
            currentPage++;
            
            // Atualizar contador e botão de carregar mais
            document.getElementById('showing-entries').textContent = `Mostrando ${end} de ${filteredInteractions.length} registros`;
            document.getElementById('load-more').disabled = end >= filteredInteractions.length;
            
            // Adicionar event listeners para os novos botões de detalhes
            document.querySelectorAll('.btn-view').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = this.getAttribute('data-index');
                    showInteractionDetails(filteredInteractions[index]);
                });
            });
        }
        
        // Mostrar detalhes da interação
        function showInteractionDetails(interaction) {
            const modal = new bootstrap.Modal(document.getElementById('detailsModal'));
            const modalContent = document.getElementById('modal-content');
            
            const date = new Date(interaction.timestamp || Date.now());
            const formattedDate = formatDate(date);
            
            let content = `
                <div class="detail-section">
                    <h4 class="detail-title">Informações Básicas</h4>
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <tr>
                                <th style="width: 150px;">Nome</th>
                                <td>${interaction.name || '-'}</td>
                            </tr>
                            <tr>
                                <th>E-mail</th>
                                <td>${interaction.email || '-'}</td>
                            </tr>
                            <tr>
                                <th>Telefone</th>
                                <td>${interaction.phoneNumber || '-'}</td>
                            </tr>
                            <tr>
                                <th>Data/Hora</th>
                                <td>${formattedDate}</td>
                            </tr>
                            <tr>
                                <th>Tipo</th>
                                <td>${interaction.type === 'letter_delivered' ? 'Carta Entregue' : 
                                      interaction.type === 'followup_question' ? 'Pergunta de Acompanhamento' : 
                                      interaction.type}</td>
                            </tr>
                        </table>
                    </div>
                </div>
            `;
            
            if (interaction.type === 'letter_delivered') {
                content += `
                    <div class="detail-section">
                        <h4 class="detail-title">Detalhes da Carta</h4>
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <tr>
                                    <th style="width: 150px;">Tipo de Carta</th>
                                    <td>${interaction.letterIsGeneric ? 'Genérica' : 'Personalizada'}</td>
                                </tr>
                                <tr>
                                    <th>Desafio Negócio</th>
                                    <td>${interaction.businessChallenge || '-'}</td>
                                </tr>
                                <tr>
                                    <th>Desafio Pessoal</th>
                                    <td>${interaction.personalChallenge || '-'}</td>
                                </tr>
                                <tr>
                                    <th>Perfil URL</th>
                                    <td>${interaction.profileUrl ? `<a href="${interaction.profileUrl}" target="_blank">${interaction.profileUrl}</a>` : '-'}</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                `;
            } else if (interaction.type === 'followup_question') {
                content += `
                    <div class="detail-section">
                        <h4 class="detail-title">Pergunta e Resposta</h4>
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <tr>
                                    <th style="width: 150px;">Pergunta</th>
                                    <td>${interaction.question || '-'}</td>
                                </tr>
                                <tr>
                                    <th>Resposta</th>
                                    <td>${interaction.answer || '-'}</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                `;
            }
            
            modalContent.innerHTML = content;
            modal.show();
        }
        
        // Download de interação individual
        function downloadInteraction(index) {
            const interaction = filteredInteractions[index];
            const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(interaction, null, 2));
            const downloadAnchorNode = document.createElement('a');
            downloadAnchorNode.setAttribute("href", dataStr);
            downloadAnchorNode.setAttribute("download", `interacao_${interaction.phoneNumber}_${new Date().toISOString().slice(0,10)}.json`);
            document.body.appendChild(downloadAnchorNode);
            downloadAnchorNode.click();
            downloadAnchorNode.remove();
        }
    </script>
</body>
</html>
