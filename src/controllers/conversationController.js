import sessionService from '../services/sessionService.js';
import whatsappService from '../services/whatsappService.js';
import * as openaiService from '../services/openaiService.js';
import * as visionAnalysisService from '../services/visionAnalysisService.js';
import * as profileScraperService from '../services/profileScraperService.js';
import * as contentGenerationService from '../services/contentGenerationService.js';
import dashboardIntegrationService from '../services/dashboardIntegrationService.js';
import { log } from '../utils/logger.js';
import { isValidUrl, normalizeProfileUrl } from '../utils/validators.js';

// Estados da conversa
const CONVERSATION_STATES = {
  INITIAL: 'initial',
  WAITING_NAME: 'waiting_name',
  WAITING_BUSINESS: 'waiting_business',
  WAITING_PROFILE: 'waiting_profile',
  WAITING_CHALLENGE: 'waiting_challenge',
  GENERATING_LETTER: 'generating_letter',
  LETTER_DELIVERED: 'letter_delivered',
  WAITING_COMMAND: 'waiting_command'
};

// Comandos especiais
const COMMANDS = {
  IA: 'ia',
  INSPIRACAO: 'inspiracao',
  NAO: 'nao',
  CARTA: 'carta'
};

/**
 * Normaliza o texto removendo acentos, espa√ßos extras e convertendo para min√∫sculas
 * @param {string} text - Texto a ser normalizado
 * @returns {string} - Texto normalizado
 */
function normalizeText(text) {
  if (!text) return '';
  
  // Remove acentos
  const normalized = text.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
  
  // Remove espa√ßos extras e converte para min√∫sculas
  return normalized.toLowerCase().trim().replace(/\s+/g, ' ');
}

/**
 * Processa mensagens recebidas do webhook do WhatsApp
 * @param {Object} req - Objeto de requisi√ß√£o Express
 * @param {Object} res - Objeto de resposta Express
 */
export async function processMessage(req, res) {
  try {
    // Verifica se √© uma mensagem v√°lida
    if (!req.body || !req.body.entry || !req.body.entry[0] || !req.body.entry[0].changes || !req.body.entry[0].changes[0]) {
      return res.sendStatus(400);
    }

    const value = req.body.entry[0].changes[0].value;
    
    // Verifica se √© uma mensagem do WhatsApp
    if (!value || !value.messages || !value.messages[0]) {
      return res.sendStatus(200);
    }

    // Extrai dados da mensagem
    const message = value.messages[0];
    const userPhoneNumber = message.from;
    const messageId = message.id;
    
    // Marca a mensagem como lida
    await whatsappService.markMessageAsRead(messageId);

    // Obt√©m ou cria a sess√£o do usu√°rio
    let session = await sessionService.getSession(userPhoneNumber);
    
    if (!session) {
      session = {
        phoneNumber: userPhoneNumber,
        state: CONVERSATION_STATES.INITIAL,
        startTimestamp: Date.now()
      };
      await sessionService.saveSession(userPhoneNumber, session);
    }

    // Processa a mensagem com base no tipo
    if (message.type === 'text') {
      await handleTextMessage(userPhoneNumber, message.text.body, session);
    } else if (message.type === 'image') {
      await handleImageMessage(userPhoneNumber, message.image, session);
    } else {
      // Tipo de mensagem n√£o suportado
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, s√≥ posso processar mensagens de texto ou imagens. Por favor, envie seu desafio em formato de texto ou uma imagem do seu perfil."
      );
    }

    return res.sendStatus(200);
  } catch (error) {
    log('Erro ao processar mensagem:', error);
    return res.sendStatus(500);
  }
}

/**
 * Processa mensagens de texto
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} messageText - Texto da mensagem
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function handleTextMessage(userPhoneNumber, messageText, session) {
  try {
    const text = messageText.trim();
    const normalizedText = normalizeText(text);
    
    log(`Texto normalizado: "${normalizedText}"`);
    
    // Verifica se √© o gatilho de in√≠cio
    if (normalizedText.includes("quero receber") && normalizedText.includes("carta") || 
        normalizedText.includes("quero carta") || 
        normalizedText.includes("receber carta") || 
        normalizedText === "comecar" || 
        normalizedText === "iniciar") {
      
      log(`Gatilho de in√≠cio detectado de ${userPhoneNumber}: "${normalizedText}"`);
      
      // Reinicia a conversa
      session = {
        phoneNumber: userPhoneNumber,
        state: CONVERSATION_STATES.INITIAL,
        startTimestamp: Date.now()
      };
      await sessionService.saveSession(userPhoneNumber, session);
      await startConversation(userPhoneNumber);
      return;
    }
    
    // Processa a mensagem com base no estado atual da conversa
    switch (session.state) {
      case CONVERSATION_STATES.INITIAL:
        await startConversation(userPhoneNumber);
        break;
        
      case CONVERSATION_STATES.WAITING_NAME:
        await processName(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.WAITING_BUSINESS:
        await processBusiness(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.WAITING_PROFILE:
        await processProfile(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.WAITING_CHALLENGE:
        await processChallenge(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.LETTER_DELIVERED:
      case CONVERSATION_STATES.WAITING_COMMAND:
        await processCommand(userPhoneNumber, text, session);
        break;
        
      default:
        // Estado desconhecido, reinicia a conversa
        await whatsappService.sendTextMessage(
          userPhoneNumber,
          "Algo deu errado, vamos come√ßar novamente? Envie \"Quero receber a minha Carta!\" para reiniciar o processo."
        );
        session.state = CONVERSATION_STATES.INITIAL;
        await sessionService.saveSession(userPhoneNumber, session);
    }
  } catch (error) {
    log('Erro ao processar mensagem de texto:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro inesperado. Por favor, tente novamente mais tarde ou envie \"Quero receber a minha Carta!\" para reiniciar o processo."
    );
  }
}

/**
 * Processa mensagens de imagem
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {Object} imageData - Dados da imagem
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function handleImageMessage(userPhoneNumber, imageData, session) {
  try {
    // Verifica se est√° no estado correto para receber imagens
    if (session.state !== CONVERSATION_STATES.WAITING_PROFILE) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, n√£o estou esperando uma imagem neste momento. Por favor, siga as instru√ß√µes anteriores ou envie \"Quero receber a minha Carta!\" para reiniciar."
      );
      return;
    }
    
    // Obt√©m a URL da imagem
    const mediaId = imageData.id;
    const imageUrl = await whatsappService.getMediaUrl(mediaId);
    
    if (!imageUrl) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, n√£o consegui processar sua imagem. Por favor, tente enviar novamente ou envie um link do seu perfil."
      );
      return;
    }
    
    // Classifica o tipo de imagem (screenshot ou foto)
    const imageType = await visionAnalysisService.classifyImageType(imageUrl);
    
    // Analisa a imagem
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Obrigado!"
    );
    
    let imageAnalysis = '';
    try {
      imageAnalysis = await visionAnalysisService.analyzeImageFromUrl(imageUrl);
    } catch (error) {
      log('Erro ao analisar imagem:', error);
      imageAnalysis = '';
    }
    
    // Atualiza a sess√£o com os dados da imagem
    session.imageUrl = imageUrl;
    session.imageAnalysis = imageAnalysis;
    session.inputType = imageType;
    session.state = CONVERSATION_STATES.WAITING_CHALLENGE;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o desafio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "S√≥ mais uma coisa: me responda com sinceridade...\n\nüåê *Se voc√™ pudesse escolher apenas UM desafio que, se resolvido, traria os resultados que voc√™ mais deseja, qual seria?*\n\n(Responda com apenas uma frase)"
    );
  } catch (error) {
    log('Erro ao processar mensagem de imagem:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar sua imagem. Por favor, tente enviar um link do seu perfil em vez disso ou envie \"Quero receber a minha Carta!\" para reiniciar."
    );
  }
}

/**
 * Inicia a conversa com o usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 */
async function startConversation(userPhoneNumber) {
  try {
    log(`Iniciando conversa para ${userPhoneNumber}`);
    
    // Mensagem de boas-vindas
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Ol√°! üëã Bem-vindo(a) √† *CONSCI√äNC.IA* do evento *Mapa do Lucro: Jornada do Extraordin√°rio*!\n\nSou uma IA criada para gerar sua *Carta personalizada* ‚Äî uma an√°lise √∫nica, emocional e estrat√©gica baseada no seu perfil e no momento que voc√™ est√° vivendo.\n\nPara come√ßar, preciso conhecer voc√™ melhor.üôÇ\n\nComo gostaria de ser chamado(a)?"
    );
    
    // Atualiza o estado da sess√£o
    const session = await sessionService.getSession(userPhoneNumber);
    if (session) {
      session.state = CONVERSATION_STATES.WAITING_NAME;
      await sessionService.saveSession(userPhoneNumber, session);
    } else {
      // Cria uma nova sess√£o se n√£o existir
      const newSession = {
        phoneNumber: userPhoneNumber,
        state: CONVERSATION_STATES.WAITING_NAME,
        startTimestamp: Date.now()
      };
      await sessionService.saveSession(userPhoneNumber, newSession);
    }
  } catch (error) {
    log('Erro ao iniciar conversa:', error);
    
    // Tenta enviar uma mensagem simplificada em caso de erro
    try {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Ol√°! Bem-vindo(a) ao Conselheiro Consci√™nc.IA. Como gostaria de ser chamado(a)?"
      );
    } catch (retryError) {
      log('Erro na segunda tentativa de iniciar conversa:', retryError);
    }
  }
}

/**
 * Processa o nome do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} name - Nome do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processName(userPhoneNumber, name, session) {
  try {
    // Valida o nome
    if (!name || name.length < 2) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Por favor, informe um nome v√°lido."
      );
      return;
    }
    
    // Atualiza a sess√£o com o nome
    session.name = name;
    session.state = CONVERSATION_STATES.WAITING_BUSINESS;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o neg√≥cio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      `Obrigado, ${name}! üòä\n\nPara uma melhor experi√™ncia, gostaria de me contar *qual √© o seu Neg√≥cio ou trabalho atual e o seu papel nele?*\n\n(Responda em apenas uma frase)`
    );
  } catch (error) {
    log('Erro ao processar nome:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu nome. Por favor, tente novamente ou envie \"Quero receber a minha Carta!\" para reiniciar."
    );
  }
}

/**
 * Processa o neg√≥cio do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} business - Neg√≥cio do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processBusiness(userPhoneNumber, business, session) {
  try {
    // Verifica se o usu√°rio quer pular esta etapa
    if (business.toLowerCase() === "pular") {
      session.business = null;
    } else {
      session.business = business;
    }
    
    // Atualiza a sess√£o
    session.state = CONVERSATION_STATES.WAITING_PROFILE;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o perfil
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Perfeito! Agora, para gerar sua *Carta personalizada*, preciso analisar seu perfil digital. Consigo fazer isso com:\n\n1Ô∏è‚É£Uma foto sua *OU* \n2Ô∏è‚É£Um print do seu perfil (Instagram ou LinkedIn) *OU* \n3Ô∏è‚É£Apenas me diga seu @ (ex: @renatohilel.oficial).\n\nüìù Escolha *apenas UMA op√ß√£o* e me envie agora para come√ßar!"
    );
  } catch (error) {
    log('Erro ao processar neg√≥cio:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar sua informa√ß√£o. Por favor, tente novamente ou envie \"Quero receber a minha Carta!\" para reiniciar."
    );
  }
}

/**
 * Processa o perfil do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} profileInput - Input do perfil (URL ou username)
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processProfile(userPhoneNumber, profileInput, session) {
  try {
    // Normaliza a entrada do perfil
    let profileUrl = profileInput;
    let inputType = 'username';
    
    // Verifica se √© uma URL v√°lida
    if (isValidUrl(profileInput)) {
      profileUrl = profileInput;
      inputType = 'link';
    } else if (profileInput.startsWith('@')) {
      // √â um username do Instagram
      profileUrl = normalizeProfileUrl(profileInput);
    }
    
    // Atualiza a sess√£o com os dados do perfil
    session.profileUrl = profileUrl;
    session.inputType = inputType;
    
    // Tenta extrair dados do perfil
    let profileData = null;
    try {
      profileData = await profileScraperService.scrapeProfile(profileUrl);
      session.profileData = profileData;
    } catch (error) {
      log('Erro ao extrair dados do perfil:', error);
    }
    
    // Tenta analisar o perfil
    let profileAnalysis = '';
    try {
      profileAnalysis = await profileScraperService.analyzeProfileWithAI(profileUrl);
      session.profileAnalysis = profileAnalysis;
    } catch (error) {
      log('Erro ao analisar perfil:', error);
    }
    
    // Atualiza o estado da sess√£o
    session.state = CONVERSATION_STATES.WAITING_CHALLENGE;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o desafio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Agora me diga, com sinceridade...\n\nüåê Se voc√™ pudesse escolher apenas *UM DESAFIO ATUAL* que, se resolvido, traria os resultados que voc√™ mais deseja, qual seria?\n\n(Responda com apenas uma frase)"
    );
  } catch (error) {
    log('Erro ao processar perfil:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu perfil. Por favor, tente novamente ou envie \"Quero receber a minha Carta!\" para reiniciar."
    );
  }
}

/**
 * Processa o desafio do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} challenge - Desafio do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processChallenge(userPhoneNumber, challenge, session) {
  try {
    // Valida o desafio
    if (!challenge || challenge.length < 2) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Por favor, informe um desafio v√°lido em uma frase."
      );
      return;
    }
    
    // Atualiza a sess√£o com o desafio
    session.challenge = challenge;
    session.state = CONVERSATION_STATES.GENERATING_LETTER;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Informa que est√° gerando a carta
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "‚è≥ Estou analisando suas informa√ß√µes e preparando sua *Carta da Consci√™nc.IA*‚Ä¶\nIsso pode levar alguns instantes...\n\nüåü *Respire fundo enquanto a magia acontece*ü™Ñ"
    );
    
    // Gera a carta
    let letterContent = '';
    try {
      // Calcula o tempo de in√≠cio para m√©tricas
      const startTime = Date.now();
      
      // Gera a carta com base nos dados do usu√°rio
      letterContent = await contentGenerationService.generateConscienceLetter({
        name: session.name,
        business: session.business,
        profileUrl: session.profileUrl,
        profileData: session.profileData,
        profileAnalysis: session.profileAnalysis,
        imageAnalysis: session.imageAnalysis,
        challenge: session.challenge,
        inputType: session.inputType
      });
      
      // Calcula o tempo de processamento
      const processingTime = (Date.now() - startTime) / 1000; // em segundos
      session.processingTime = processingTime;
      
      // Atualiza a sess√£o com a carta gerada
      session.letterContent = letterContent;
      session.state = CONVERSATION_STATES.LETTER_DELIVERED;
      session.endTimestamp = Date.now();
      session.status = 'completed';
      await sessionService.saveSession(userPhoneNumber, session);
      
      // Salva a intera√ß√£o para o painel administrativo
      await dashboardIntegrationService.saveInteractionFromSession(session);
      
      // Envia a carta para o usu√°rio
      await sendLetter(userPhoneNumber, letterContent);
      
      // Envia mensagem de conclus√£o
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "üíå *Sua Carta foi entregue!* ‚ú®\n\nEspero que tenha apreciado a experi√™ncia! üåü\n\nPara saber mais sobre como a IA pode transformar seu neg√≥cio e sua vida, conhe√ßa o *PROGRAMA CONSCI√äNC.IA*, criado pelos Mentores @RenatoHilel.oficial e @NunoArcanjo.poeta.\n\nVisite: https://www.floreon.app.br/conscienc-ia\n\nAproveite o MAPA DO LUCRO e n√£o deixe de conversar pessoalmente com os criadores desta experi√™ncia!\n\nUm gande abra√ßo, Renato e Nuno. üí´"
      );
    } catch (error) {
      log('Erro ao gerar carta:', error);
      
      // Atualiza o status da sess√£o
      session.status = 'error';
      session.endTimestamp = Date.now();
      await sessionService.saveSession(userPhoneNumber, session);
      
      // Salva a intera√ß√£o com erro para o painel administrativo
      await dashboardIntegrationService.saveInteractionFromSession(session);
      
      // Envia mensagem de erro para o usu√°rio
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Encontrei um obst√°culo ao criar sua carta. Por favor, tente novamente mais tarde ou envie \"Quero receber a minha Carta!\" para reiniciar o processo."
      );
    }
  } catch (error) {
    log('Erro ao processar desafio:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Encontrei um obst√°culo ao processar seu desafio. Por favor, tente novamente ou envie \"Quero receber a minha Carta!\" para reiniciar."
    );
  }
}

/**
 * Envia a carta para o usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} letterContent - Conte√∫do da carta
 */
async function sendLetter(userPhoneNumber, letterContent) {
  try {
    // Divide a carta em partes menores para evitar problemas de envio
    const parts = letterContent.split('---');
    
    // Envia cada parte da carta
    for (const part of parts) {
      if (part.trim()) {
        await whatsappService.sendTextMessage(userPhoneNumber, part.trim());
      }
    }
    
    // Envia a mensagem final 
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "‚úèÔ∏è √öltimo *Conselho de ouro da Consci√™nc.IA*:\n\nAproveite para seguir e acompanhar os perfis do \n1Ô∏è‚É£M√©todo S.I.M. (@metodosimbrasil),\n2Ô∏è‚É£Mapa do Lucro (@mapadolucroh4b) e \n3Ô∏è‚É£IKIGAI (@coworkingikigai). \n\nüóùÔ∏èA chave para o seu pr√≥ximo n√≠vel est√° na *nossa comunidade fortalecida*!ü¶æ"
    );
  } catch (error) {
    log('Erro ao enviar carta:', error);
    
    // Tenta enviar uma mensagem simplificada em caso de erro
    try {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, encontrei um problema ao enviar sua carta completa. Por favor, envie \"Quero receber a minha Carta!\" para tentar novamente."
      );
    } catch (retryError) {
      log('Erro na segunda tentativa de enviar carta:', retryError);
    }
  }
}

/**
 * Processa comandos ap√≥s a entrega da carta
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} text - Texto do comando
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processCommand(userPhoneNumber, text, session) {
  try {
    const normalizedText = normalizeText(text);
    
    // Verifica se √© um comando para mostrar o pr√≥ximo passo
    if (normalizedText.includes("proximo passo") || 
        normalizedText.includes("proximo") || 
        normalizedText.includes("passo")) {
      
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "üåü *Pr√≥ximos Passos* üåü\n\nAgora que voc√™ recebeu sua Carta da Consci√™nc.IA, recomendo:\n\n1. Salve sua carta para refer√™ncia futura\n2. Converse com Renato Hilel e Nuno Arcanjo sobre como a IA pode transformar seu neg√≥cio\n\nPara mais informa√ß√µes, acesse: https://www.floreon.app.br/conscienc-ia"
      );
      return;
    }
    
    // Se n√£o for um comando espec√≠fico, envia uma mensagem padr√£o
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Obrigado por usar o Conselheiro Consci√™nc.IA!"
    );
  } catch (error) {
    log('Erro ao processar comando:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu comando. Por favor, tente novamente ou envie \"Quero receber a minha Carta!\" para reiniciar."
    );
  }
}
