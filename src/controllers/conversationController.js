import sessionService from '../services/sessionService.js';
import whatsappService from '../services/whatsappService.js';
import * as openaiService from '../services/openaiService.js';
import * as visionAnalysisService from '../services/visionAnalysisService.js';
import * as scrapingService from '../services/scrapingService.js';
import * as contentGenerationService from '../services/contentGenerationService.js';
import interactionService from '../services/interactionService.js';
import { log } from '../utils/logger.js';
import { isValidUrl, normalizeProfileUrl } from '../utils/validators.js';

// Estados da conversa
const CONVERSATION_STATES = {
  INITIAL: 'initial',
  WAITING_NAME: 'waiting_name',
  WAITING_EMAIL: 'waiting_email',
  WAITING_PROFILE: 'waiting_profile',
  WAITING_CHALLENGE: 'waiting_challenge',
  GENERATING_LETTER: 'generating_letter',
  LETTER_DELIVERED: 'letter_delivered',
  WAITING_COMMAND: 'waiting_command'
};

/**
 * Processa mensagens recebidas do webhook do WhatsApp
 * @param {Object} req - Objeto de requisi√ß√£o Express
 * @param {Object} res - Objeto de resposta Express
 */
export async function processMessage(req, res) {
  try {
    // Verifica se √© uma mensagem v√°lida
    if (!req.body || !req.body.entry || !req.body.entry[0] || !req.body.entry[0].changes || !req.body.entry[0].changes[0]) {
      return res.sendStatus(400);
    }

    const value = req.body.entry[0].changes[0].value;
    
    // Verifica se √© uma mensagem do WhatsApp
    if (!value || !value.messages || !value.messages[0]) {
      return res.sendStatus(200);
    }

    // Extrai dados da mensagem
    const message = value.messages[0];
    const userPhoneNumber = message.from;
    const messageId = message.id;
    
    // Marca a mensagem como lida
    await whatsappService.markMessageAsRead(messageId);

    // Obt√©m ou cria a sess√£o do usu√°rio
    let session = await sessionService.getSession(userPhoneNumber);
    
    if (!session) {
      session = {
        phoneNumber: userPhoneNumber,
        state: CONVERSATION_STATES.INITIAL,
        startTimestamp: Date.now()
      };
      await sessionService.saveSession(userPhoneNumber, session);
    }

    // Processa a mensagem com base no tipo
    if (message.type === 'text') {
      await processTextMessage(userPhoneNumber, message.text.body, session);
    } else if (message.type === 'image') {
      await processImageMessage(userPhoneNumber, message.image, session);
    } else {
      // Tipo de mensagem n√£o suportado
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, s√≥ posso processar mensagens de texto ou imagens. Por favor, envie seu desafio em formato de texto ou uma imagem do seu perfil."
      );
    }

    return res.sendStatus(200);
  } catch (error) {
    log('Erro ao processar mensagem:', error);
    return res.sendStatus(500);
  }
}

/**
 * Processa mensagens de texto
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} messageText - Texto da mensagem
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processTextMessage(userPhoneNumber, messageText, session) {
  try {
    const text = messageText.trim();
    
    // Comandos especiais dispon√≠veis em qualquer estado
    if (text.toLowerCase() === "quero receber a minha carta!") {
      // Reinicia a conversa
      session = {
        phoneNumber: userPhoneNumber,
        state: CONVERSATION_STATES.INITIAL,
        startTimestamp: Date.now()
      };
      await sessionService.saveSession(userPhoneNumber, session);
      await startConversation(userPhoneNumber);
      return;
    }
    
    // Processa a mensagem com base no estado atual da conversa
    switch (session.state) {
      case CONVERSATION_STATES.INITIAL:
        await startConversation(userPhoneNumber);
        break;
        
      case CONVERSATION_STATES.WAITING_NAME:
        await processName(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.WAITING_EMAIL:
        await processEmail(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.WAITING_PROFILE:
        await processProfile(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.WAITING_CHALLENGE:
        await processChallenge(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.LETTER_DELIVERED:
      case CONVERSATION_STATES.WAITING_COMMAND:
        await processCommand(userPhoneNumber, text, session);
        break;
        
      default:
        // Estado desconhecido, reinicia a conversa
        await whatsappService.sendTextMessage(
          userPhoneNumber,
          "Algo deu errado, vamos come√ßar novamente? Envie \"Quero receber a minha Carta!\" para reiniciar o processo."
        );
        session.state = CONVERSATION_STATES.INITIAL;
        await sessionService.saveSession(userPhoneNumber, session);
    }
  } catch (error) {
    log('Erro ao processar mensagem de texto:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro inesperado. Por favor, tente novamente mais tarde."
    );
  }
}

/**
 * Processa mensagens de imagem
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {Object} imageData - Dados da imagem
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processImageMessage(userPhoneNumber, imageData, session) {
  try {
    // Verifica se est√° no estado correto para receber imagens
    if (session.state !== CONVERSATION_STATES.WAITING_PROFILE) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, n√£o estou esperando uma imagem neste momento. Por favor, siga as instru√ß√µes anteriores."
      );
      return;
    }
    
    // Obt√©m a URL da imagem
    const mediaId = imageData.id;
    const imageUrl = await whatsappService.getMediaUrl(mediaId);
    
    if (!imageUrl) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, n√£o consegui processar sua imagem. Por favor, tente enviar novamente ou envie um link do seu perfil."
      );
      return;
    }
    
    // Classifica o tipo de imagem (screenshot ou foto)
    const imageType = await visionAnalysisService.classifyImageType(imageUrl);
    
    // Analisa a imagem
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Obrigado! Vou analisar sua imagem. Isso pode levar alguns instantes..."
    );
    
    let imageAnalysis = '';
    try {
      imageAnalysis = await visionAnalysisService.analyzeImageFromUrl(imageUrl);
    } catch (error) {
      log('Erro ao analisar imagem:', error);
      imageAnalysis = '';
    }
    
    // Atualiza a sess√£o com os dados da imagem
    session.imageUrl = imageUrl;
    session.imageAnalysis = imageAnalysis;
    session.inputType = imageType;
    session.state = CONVERSATION_STATES.WAITING_CHALLENGE;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o desafio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      `Obrigado! Agora me conta, em apenas uma frase ou palavra, qual √© o maior desafio que voc√™ tem enfrentado no seu ${session.name ? 'Neg√≥cio' : 'neg√≥cio'} no momento?`
    );
  } catch (error) {
    log('Erro ao processar mensagem de imagem:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar sua imagem. Por favor, tente enviar um link do seu perfil em vez disso."
    );
  }
}

/**
 * Inicia a conversa com o usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 */
async function startConversation(userPhoneNumber) {
  try {
    // Mensagem de boas-vindas
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Ol√°! üëã Bem-vindo(a) ao Conselheiro da Consci√™nc.IA do evento MAPA DO LUCRO!\n\nSou um assistente virtual especial criado para gerar sua \"Carta de Consci√™ncia\" personalizada ‚Äì uma an√°lise √∫nica baseada no seu perfil digital que revelar√° insights valiosos sobre seu comportamento empreendedor e recomenda√ß√µes pr√°ticas de como usar IA no seu neg√≥cio.\n\nPara come√ßar, preciso conhecer voc√™ melhor.\nPor favor, como gostaria de ser chamado(a)?"
    );
    
    // Atualiza o estado da sess√£o
    const session = await sessionService.getSession(userPhoneNumber);
    session.state = CONVERSATION_STATES.WAITING_NAME;
    await sessionService.saveSession(userPhoneNumber, session);
  } catch (error) {
    log('Erro ao iniciar conversa:', error);
  }
}

/**
 * Processa o nome do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} name - Nome do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processName(userPhoneNumber, name, session) {
  try {
    // Valida o nome
    if (!name || name.length < 2) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Por favor, informe um nome v√°lido."
      );
      return;
    }
    
    // Atualiza a sess√£o com o nome
    session.name = name;
    session.state = CONVERSATION_STATES.WAITING_EMAIL;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o e-mail
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      `Obrigado, ${name}! üòä\n\nPara enviarmos materiais ap√≥s o evento, por favor, informe seu e-mail:\n\n(Caso n√£o queira informar agora, digite "pular" para continuar)`
    );
  } catch (error) {
    log('Erro ao processar nome:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu nome. Por favor, tente novamente."
    );
  }
}

/**
 * Processa o e-mail do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} email - E-mail do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processEmail(userPhoneNumber, email, session) {
  try {
    // Verifica se o usu√°rio quer pular esta etapa
    if (email.toLowerCase() === "pular") {
      session.email = null;
    } else {
      // Valida o e-mail (valida√ß√£o b√°sica)
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        await whatsappService.sendTextMessage(
          userPhoneNumber,
          "Por favor, informe um e-mail v√°lido ou digite \"pular\" para continuar."
        );
        return;
      }
      
      session.email = email;
    }
    
    // Atualiza a sess√£o
    session.state = CONVERSATION_STATES.WAITING_PROFILE;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o perfil
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Perfeito! Agora, para gerar sua Carta de Consci√™ncia personalizada, preciso analisar seu perfil digital.\n\nPor favor, me envie o link do seu perfil p√∫blico do Instagram ou LinkedIn.\nExemplo: https://www.instagram.com/seuusuario\n\n(Voc√™ tamb√©m pode enviar apenas seu @usu√°rio, ou at√© mesmo uma imagem do perfil / print. )"
    );
  } catch (error) {
    log('Erro ao processar e-mail:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu e-mail. Por favor, tente novamente."
    );
  }
}

/**
 * Processa o perfil do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} profileInput - Input do perfil (URL ou username)
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processProfile(userPhoneNumber, profileInput, session) {
  try {
    // Normaliza a entrada do perfil
    let profileUrl = profileInput;
    let inputType = 'username';
    
    // Verifica se √© uma URL v√°lida
    if (isValidUrl(profileInput)) {
      profileUrl = profileInput;
      inputType = 'link';
    } else if (profileInput.startsWith('@')) {
      // √â um username do Instagram
      profileUrl = normalizeProfileUrl(profileInput);
    }
    
    // Atualiza a sess√£o com os dados do perfil
    session.profileUrl = profileUrl;
    session.inputType = inputType;
    
    // Tenta extrair dados do perfil
    let profileData = null;
    try {
      profileData = await scrapingService.scrapeProfile(profileUrl);
      session.profileData = profileData;
    } catch (error) {
      log('Erro ao extrair dados do perfil:', error);
    }
    
    // Tenta analisar o perfil
    let profileAnalysis = '';
    try {
      profileAnalysis = await scrapingService.analyzeProfileWithAI(profileUrl);
      session.profileAnalysis = profileAnalysis;
    } catch (error) {
      log('Erro ao analisar perfil:', error);
    }
    
    // Atualiza o estado da sess√£o
    session.state = CONVERSATION_STATES.WAITING_CHALLENGE;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o desafio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      `Obrigado! Agora me conta, em apenas uma frase ou palavra, qual √© o maior desafio que voc√™ tem enfrentado no seu ${session.name ? 'Neg√≥cio' : 'neg√≥cio'} no momento?`
    );
  } catch (error) {
    log('Erro ao processar perfil:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu perfil. Por favor, tente novamente."
    );
  }
}

/**
 * Processa o desafio do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} challenge - Desafio do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processChallenge(userPhoneNumber, challenge, session) {
  try {
    // Valida o desafio
    if (!challenge || challenge.length < 2) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Por favor, informe um desafio v√°lido, mesmo que seja em apenas uma palavra."
      );
      return;
    }
    
    // Atualiza a sess√£o com o desafio
    session.challenge = challenge;
    session.state = CONVERSATION_STATES.GENERATING_LETTER;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Informa que est√° gerando a carta
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Gratid√£o por compartilhar! üôè\n\nVou analisar seu perfil e gerar sua Carta de Consci√™ncia personalizada. Isso pode levar alguns instantes... ‚åõ"
    );
    
    // Gera a carta de consci√™ncia
    const userData = {
      name: session.name,
      challenge: session.challenge,
      profileUrl: session.profileUrl,
      profileData: session.profileData,
      profileAnalysis: session.profileAnalysis,
      imageAnalysis: session.imageAnalysis,
      inputType: session.inputType
    };
    
    // Registra o in√≠cio da gera√ß√£o
    const generationStartTime = Date.now();
    
    // Gera a carta
    let letterContent = '';
    try {
      letterContent = await contentGenerationService.generateConscienceLetter(userData);
    } catch (error) {
      log('Erro ao gerar carta:', error);
      
      // Tenta novamente com um prompt mais simples
      try {
        letterContent = await openaiService.generateConscienceLetter({
          name: session.name,
          challenge: session.challenge
        });
      } catch (retryError) {
        log('Erro na segunda tentativa de gerar carta:', retryError);
        
        // Usa uma carta gen√©rica em caso de falha
        letterContent = `‚ù§Ô∏è *Introdu√ß√£o Simb√≥lica:*\n\nOl√°, ${session.name},\n\nImagine por um momento, a Alma do seu Neg√≥cio como um farol brilhante na noite, iluminando o caminho para aqueles que navegam nos mares tempestuosos da incerteza. Voc√™ √© o guardi√£o desse farol, a luz que traz orienta√ß√£o e esperan√ßa.\n\n‚ú® *Perfil Comportamental (Insight de Consci√™ncia):*\n\nAnalisando seu perfil digital, √© evidente a paix√£o que arde em voc√™. Seus interesses variados demonstram a abrang√™ncia de sua curiosidade e seus padr√µes de pensamento inovadores. No conceito de Ikigai, temos uma intersec√ß√£o de quatro elementos fundamentais: O que voc√™ ama, o que o mundo precisa, o que voc√™ pode ser pago para fazer e o que voc√™ √© bom.\n\nüíé *Conselho de Ouro:*\n\nSeu desafio, "${session.challenge}", √© como um vulc√£o adormecido. Pode parecer assustador, mas lembre-se, √© a press√£o que forma os diamantes. N√£o tenha medo do desafio. Abra√ß√°-lo √© o que o levar√° ao pr√≥ximo n√≠vel. No contexto do Ikigai, procure aquilo que faz seu esp√≠rito vibrar, isso que se conecta com o seu ser mais profundo. Encontre seu equil√≠brio entre o que voc√™ ama, o que √© bom, o que o mundo precisa e pelo qual voc√™ pode ser pago. Acredite no seu potencial.\n\nüöÄ *Sugest√£o de Ferramenta de IA:*\n\nUma ferramenta pr√°tica de Intelig√™ncia Artificial que pode ajudar diretamente com seu desafio √© o Assistente Virtual Personalizado. Ele pode fornecer uma an√°lise detalhada do mundo ao seu redor, fornecendo insights e permitindo tomar decis√µes mais informadas e focadas. Al√©m disso, pode ajud√°-lo a gerenciar seu tempo e tarefas, permitindo que voc√™ se concentre no que √© mais importante.\n\n‚ú® *P√≠lula de Inspira√ß√£o (Poesia Personalizada):*\n\nEm mares de incerteza, voc√™ navega,\nCom a Alma do Neg√≥cio a iluminar,\nDesafios enormes, como montanhas se elevam,\nMas voc√™, ${session.name}, est√° aqui para conquistar.\n\nNo vulc√£o do desafio, um diamante nasce,\nEm seu Ikigai, sua verdadeira luz resplandece,\nEm seu esp√≠rito, um fogo incans√°vel arde,\nVoc√™ √© a estrela que o universo conhece.\n\nüåü *Conclus√£o Motivacional:*\n\n${session.name}, mantenha a cabe√ßa erguida e o cora√ß√£o aberto. Continue a brilhar a luz da Alma do seu Neg√≥cio, desbravando o desconhecido e enfrentando os desafios. Seu Ikigai est√° ao alcance. Acredite em voc√™ e ver√° que o imposs√≠vel √© apenas uma opini√£o.`;
      }
    }
    
    // Calcula o tempo de processamento
    const processingTime = Date.now() - generationStartTime;
    
    // Atualiza a sess√£o com a carta gerada
    session.letterContent = letterContent;
    session.processingTime = processingTime;
    session.endTimestamp = Date.now();
    session.state = CONVERSATION_STATES.LETTER_DELIVERED;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Salva a intera√ß√£o para o painel administrativo
    await interactionService.saveInteraction({
      phoneNumber: userPhoneNumber,
      name: session.name,
      email: session.email,
      profileUrl: session.profileUrl,
      challenge: session.challenge,
      inputType: session.inputType,
      letterContent: letterContent,
      startTimestamp: session.startTimestamp,
      endTimestamp: session.endTimestamp,
      processingTime: processingTime,
      status: 'completed'
    });
    
    // Envia a carta para o usu√°rio
    await sendLetterInChunks(userPhoneNumber, letterContent);
    
    // Envia mensagem final com op√ß√µes
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "‚ú® Sua Carta de Consci√™ncia personalizada foi entregue! ‚ú®\n\nPosso ajudar com mais algo? Digite:\n\n*\"IA\"* para saber como a IA pode ajudar voc√™ hoje.\n*\"inspira√ß√£o\"* para outra inspira√ß√£o personalizada.\n*\"n√£o\"* para encerrar."
    );
    
    // Atualiza o estado da sess√£o
    session.state = CONVERSATION_STATES.WAITING_COMMAND;
    await sessionService.saveSession(userPhoneNumber, session);
  } catch (error) {
    log('Erro ao processar desafio:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao gerar sua carta. Por favor, tente novamente mais tarde."
    );
  }
}

/**
 * Processa comandos ap√≥s a entrega da carta
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} command - Comando do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processCommand(userPhoneNumber, command, session) {
  try {
    const lowerCommand = command.toLowerCase();
    
    if (lowerCommand === "ia") {
      // Gera sugest√µes de IA
      const iaHelp = await contentGenerationService.generateIAHelp(session.name, session.challenge);
      
      await whatsappService.sendTextMessage(userPhoneNumber, iaHelp);
      
      // Pergunta se deseja mais algo
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Posso ajudar com mais algo? Digite:\n\n*\"inspira√ß√£o\"* para uma inspira√ß√£o personalizada.\n*\"n√£o\"* para encerrar."
      );
    } else if (lowerCommand === "inspira√ß√£o") {
      // Gera inspira√ß√£o personalizada
      const inspiration = await contentGenerationService.generateInspiration(session.name, session.challenge);
      
      await whatsappService.sendTextMessage(userPhoneNumber, inspiration);
      
      // Pergunta se deseja mais algo
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Posso ajudar com mais algo? Digite:\n\n*\"IA\"* para saber como a IA pode ajudar voc√™ hoje.\n*\"n√£o\"* para encerrar."
      );
    } else if (lowerCommand === "n√£o") {
      // Encerra a conversa
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        `Obrigado por utilizar o Conselheiro da Consci√™nc.IA, ${session.name}! Foi um prazer ajudar.\n\nSe quiser receber outra Carta de Consci√™ncia no futuro, basta enviar \"Quero receber a minha Carta!\".\n\nAt√© a pr√≥xima! üëã`
      );
      
      // Adiciona mensagem sobre o Programa Consci√™nc.IA
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "üåü *Programa Consci√™nc.IA* üåü\n\nGostou da sua experi√™ncia? O Programa Consci√™nc.IA oferece uma jornada completa de transforma√ß√£o para empreendedores que desejam integrar IA em seus neg√≥cios de forma estrat√©gica e consciente.\n\nPara saber mais, acesse: https://consciencia.ia"
       );
    } else {
      // Comando n√£o reconhecido
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, n√£o reconhe√ßo esse comando. Por favor, digite:\n\n*\"IA\"* para saber como a IA pode ajudar voc√™ hoje.\n*\"inspira√ß√£o\"* para outra inspira√ß√£o personalizada.\n*\"n√£o\"* para encerrar."
      );
    }
  } catch (error) {
    log('Erro ao processar comando:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu comando. Por favor, tente novamente."
    );
  }
}

/**
 * Envia a carta em partes para evitar limita√ß√µes de tamanho do WhatsApp
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} letterContent - Conte√∫do da carta
 */
async function sendLetterInChunks(userPhoneNumber, letterContent) {
  try {
    // Divide a carta em se√ß√µes baseadas em cabe√ßalhos
    const sections = letterContent.split(/(?=\*[^*]+\*)/g);
    
    // Envia cada se√ß√£o separadamente
    for (const section of sections) {
      if (section.trim()) {
        await whatsappService.sendTextMessage(userPhoneNumber, section.trim());
        
        // Pequeno delay para evitar problemas de ordem
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
  } catch (error) {
    log('Erro ao enviar carta em partes:', error);
    
    // Tenta enviar a carta completa em caso de erro
    await whatsappService.sendTextMessage(userPhoneNumber, letterContent);
  }
}
