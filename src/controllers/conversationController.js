import sessionService from '../services/sessionService.js';
import whatsappService from '../services/whatsappService.js';
import * as openaiService from '../services/openaiService.js';
import * as visionAnalysisService from '../services/visionAnalysisService.js';
import * as scrapingService from '../services/scrapingService.js';
import * as contentGenerationService from '../services/contentGenerationService.js';
import interactionService from '../services/interactionService.js';
import { log } from '../utils/logger.js';
import { isValidUrl, normalizeProfileUrl } from '../utils/validators.js';

// Estados da conversa
const CONVERSATION_STATES = {
  INITIAL: 'initial',
  WAITING_NAME: 'waiting_name',
  WAITING_BUSINESS: 'waiting_business',
  WAITING_PROFILE: 'waiting_profile',
  WAITING_CHALLENGE: 'waiting_challenge',
  GENERATING_LETTER: 'generating_letter',
  LETTER_DELIVERED: 'letter_delivered',
  WAITING_COMMAND: 'waiting_command'
};

// Comandos especiais
const COMMANDS = {
  IA: 'ia',
  INSPIRACAO: 'inspiracao',
  NAO: 'nao',
  CARTA: 'carta'
};

/**
 * Processa mensagens recebidas do webhook do WhatsApp
 * @param {Object} req - Objeto de requisi√ß√£o Express
 * @param {Object} res - Objeto de resposta Express
 */
export async function processMessage(req, res) {
  try {
    // Verifica se √© uma mensagem v√°lida
    if (!req.body || !req.body.entry || !req.body.entry[0] || !req.body.entry[0].changes || !req.body.entry[0].changes[0]) {
      return res.sendStatus(400);
    }

    const value = req.body.entry[0].changes[0].value;
    
    // Verifica se √© uma mensagem do WhatsApp
    if (!value || !value.messages || !value.messages[0]) {
      return res.sendStatus(200);
    }

    // Extrai dados da mensagem
    const message = value.messages[0];
    const userPhoneNumber = message.from;
    const messageId = message.id;
    
    // Marca a mensagem como lida
    await whatsappService.markMessageAsRead(messageId);

    // Obt√©m ou cria a sess√£o do usu√°rio
    let session = await sessionService.getSession(userPhoneNumber);
    
    if (!session) {
      session = {
        phoneNumber: userPhoneNumber,
        state: CONVERSATION_STATES.INITIAL,
        startTimestamp: Date.now()
      };
      await sessionService.saveSession(userPhoneNumber, session);
    }

    // Processa a mensagem com base no tipo
    if (message.type === 'text') {
      await processTextMessage(userPhoneNumber, message.text.body, session);
    } else if (message.type === 'image') {
      await processImageMessage(userPhoneNumber, message.image, session);
    } else {
      // Tipo de mensagem n√£o suportado
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, s√≥ posso processar mensagens de texto ou imagens. Por favor, envie seu desafio em formato de texto ou uma imagem do seu perfil."
      );
    }

    return res.sendStatus(200);
  } catch (error) {
    log('Erro ao processar mensagem:', error);
    return res.sendStatus(500);
  }
}

/**
 * Processa mensagens de texto
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} messageText - Texto da mensagem
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processTextMessage(userPhoneNumber, messageText, session) {
  try {
    const text = messageText.trim();
    
    // Comandos especiais dispon√≠veis em qualquer estado
    if (text.toLowerCase().includes("quero receber") && text.toLowerCase().includes("carta")) {
      // Reinicia a conversa
      session = {
        phoneNumber: userPhoneNumber,
        state: CONVERSATION_STATES.INITIAL,
        startTimestamp: Date.now()
      };
      await sessionService.saveSession(userPhoneNumber, session);
      await startConversation(userPhoneNumber);
      return;
    }
    
    // Processa a mensagem com base no estado atual da conversa
    switch (session.state) {
      case CONVERSATION_STATES.INITIAL:
        await startConversation(userPhoneNumber);
        break;
        
      case CONVERSATION_STATES.WAITING_NAME:
        await processName(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.WAITING_BUSINESS:
        await processBusiness(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.WAITING_PROFILE:
        await processProfile(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.WAITING_CHALLENGE:
        await processChallenge(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.LETTER_DELIVERED:
      case CONVERSATION_STATES.WAITING_COMMAND:
        await processCommand(userPhoneNumber, text, session);
        break;
        
      default:
        // Estado desconhecido, reinicia a conversa
        await whatsappService.sendTextMessage(
          userPhoneNumber,
          "Algo deu errado, vamos come√ßar novamente? Envie \"Quero receber a minha Carta!\" para reiniciar o processo."
        );
        session.state = CONVERSATION_STATES.INITIAL;
        await sessionService.saveSession(userPhoneNumber, session);
    }
  } catch (error) {
    log('Erro ao processar mensagem de texto:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro inesperado. Por favor, tente novamente mais tarde."
    );
  }
}

/**
 * Processa mensagens de imagem
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {Object} imageData - Dados da imagem
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processImageMessage(userPhoneNumber, imageData, session) {
  try {
    // Verifica se est√° no estado correto para receber imagens
    if (session.state !== CONVERSATION_STATES.WAITING_PROFILE) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, n√£o estou esperando uma imagem neste momento. Por favor, siga as instru√ß√µes anteriores."
      );
      return;
    }
    
    // Obt√©m a URL da imagem
    const mediaId = imageData.id;
    const imageUrl = await whatsappService.getMediaUrl(mediaId);
    
    if (!imageUrl) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, n√£o consegui processar sua imagem. Por favor, tente enviar novamente ou envie um link do seu perfil."
      );
      return;
    }
    
    // Classifica o tipo de imagem (screenshot ou foto)
    const imageType = await visionAnalysisService.classifyImageType(imageUrl);
    
    // Analisa a imagem
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Obrigado! Vou analisar sua imagem. Isso pode levar alguns instantes..."
    );
    
    let imageAnalysis = '';
    try {
      imageAnalysis = await visionAnalysisService.analyzeImageFromUrl(imageUrl);
    } catch (error) {
      log('Erro ao analisar imagem:', error);
      imageAnalysis = '';
    }
    
    // Atualiza a sess√£o com os dados da imagem
    session.imageUrl = imageUrl;
    session.imageAnalysis = imageAnalysis;
    session.inputType = imageType;
    session.state = CONVERSATION_STATES.WAITING_CHALLENGE;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o desafio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Agora me diga, com sinceridade...\n\nüåê *Se voc√™ pudesse resolver apenas UM desafio neste momento*,\nqual seria esse desafio que, ao ser superado, traria os resultados que voc√™ mais deseja?\n\n(Responda com apenas uma frase)"
    );
  } catch (error) {
    log('Erro ao processar mensagem de imagem:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar sua imagem. Por favor, tente enviar um link do seu perfil em vez disso."
    );
  }
}

/**
 * Inicia a conversa com o usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 */
async function startConversation(userPhoneNumber) {
  try {
    // Mensagem de boas-vindas
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Ol√°! üëã Bem-vindo(a) ao *Conselheiro Consci√™nc.IA* do evento MAPA DO LUCRO!\n\nSou um assistente virtual criado para gerar sua *Carta da Consci√™nc.IA* personalizada ‚Äî uma an√°lise √∫nica, emocional e estrat√©gica baseada no seu perfil e no momento que voc√™ est√° vivendo.\n\nPara come√ßar, preciso conhecer voc√™ melhor.\nComo gostaria de ser chamado(a)? üôÇ"
    );
    
    // Atualiza o estado da sess√£o
    const session = await sessionService.getSession(userPhoneNumber);
    session.state = CONVERSATION_STATES.WAITING_NAME;
    await sessionService.saveSession(userPhoneNumber, session);
  } catch (error) {
    log('Erro ao iniciar conversa:', error);
  }
}

/**
 * Processa o nome do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} name - Nome do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processName(userPhoneNumber, name, session) {
  try {
    // Valida o nome
    if (!name || name.length < 2) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Por favor, informe um nome v√°lido."
      );
      return;
    }
    
    // Atualiza a sess√£o com o nome
    session.name = name;
    session.state = CONVERSATION_STATES.WAITING_BUSINESS;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o neg√≥cio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      `Obrigado, ${name}! üòä\n\nPara uma melhor experi√™ncia, gostaria de me contar qual √© o Nicho do seu Neg√≥cio ou trabalho atual e o seu papel nele?\n\n*(Caso n√£o queira informar agora, digite "pular" para continuar.)*`
    );
  } catch (error) {
    log('Erro ao processar nome:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu nome. Por favor, tente novamente."
    );
  }
}

/**
 * Processa o neg√≥cio do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} business - Neg√≥cio do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processBusiness(userPhoneNumber, business, session) {
  try {
    // Verifica se o usu√°rio quer pular esta etapa
    if (business.toLowerCase() === "pular") {
      session.business = null;
    } else {
      session.business = business;
    }
    
    // Atualiza a sess√£o
    session.state = CONVERSATION_STATES.WAITING_PROFILE;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o perfil
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Perfeito! Agora, para gerar sua Carta de Consci√™ncia personalizada, preciso analisar seu perfil digital.\n\nVoc√™ escolhe como prefere se apresentar:\n\n1Ô∏è‚É£ Envie um **print do seu perfil social** (Instagram ou LinkedIn) para uma leitura mais profunda.\n2Ô∏è‚É£ Envie **sua foto de perfil** (uma imagem que te represente hoje).\n3Ô∏è‚É£ Ou apenas me diga seu @ (ex: @renatohilel.oficial) para uma leitura objetiva.\n\nüìù Envie agora da forma que preferir!"
    );
  } catch (error) {
    log('Erro ao processar neg√≥cio:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar sua informa√ß√£o. Por favor, tente novamente."
    );
  }
}

/**
 * Processa o perfil do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} profileInput - Input do perfil (URL ou username)
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processProfile(userPhoneNumber, profileInput, session) {
  try {
    // Normaliza a entrada do perfil
    let profileUrl = profileInput;
    let inputType = 'username';
    
    // Verifica se √© uma URL v√°lida
    if (isValidUrl(profileInput)) {
      profileUrl = profileInput;
      inputType = 'link';
    } else if (profileInput.startsWith('@')) {
      // √â um username do Instagram
      profileUrl = normalizeProfileUrl(profileInput);
    }
    
    // Atualiza a sess√£o com os dados do perfil
    session.profileUrl = profileUrl;
    session.inputType = inputType;
    
    // Tenta extrair dados do perfil
    let profileData = null;
    try {
      profileData = await scrapingService.scrapeProfile(profileUrl);
      session.profileData = profileData;
    } catch (error) {
      log('Erro ao extrair dados do perfil:', error);
    }
    
    // Tenta analisar o perfil
    let profileAnalysis = '';
    try {
      profileAnalysis = await scrapingService.analyzeProfileWithAI(profileUrl);
      session.profileAnalysis = profileAnalysis;
    } catch (error) {
      log('Erro ao analisar perfil:', error);
    }
    
    // Atualiza o estado da sess√£o
    session.state = CONVERSATION_STATES.WAITING_CHALLENGE;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o desafio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Agora me diga, com sinceridade...\n\nüåê *Se voc√™ pudesse resolver apenas UM desafio neste momento*,\nqual seria esse desafio que, ao ser superado, traria os resultados que voc√™ mais deseja?\n\n(Responda com apenas uma frase)"
    );
  } catch (error) {
    log('Erro ao processar perfil:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu perfil. Por favor, tente novamente."
    );
  }
}

/**
 * Processa o desafio do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} challenge - Desafio do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processChallenge(userPhoneNumber, challenge, session) {
  try {
    // Valida o desafio
    if (!challenge || challenge.length < 2) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Por favor, informe um desafio v√°lido, mesmo que seja em apenas uma palavra."
      );
      return;
    }
    
    // Atualiza a sess√£o com o desafio
    session.challenge = challenge;
    session.state = CONVERSATION_STATES.GENERATING_LETTER;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Informa que est√° gerando a carta
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "‚è≥ Estou analisando suas informa√ß√µes e preparando sua Carta da Consci√™nc.IA‚Ä¶\nIsso pode levar alguns instantes...\n\nüåü Sinta-se confort√°vel. A magia est√° acontecendo."
    );
    
    // Gera a carta de consci√™ncia
    const userData = {
      name: session.name,
      business: session.business,
      challenge: session.challenge,
      profileUrl: session.profileUrl,
      profileData: session.profileData,
      profileAnalysis: session.profileAnalysis,
      imageAnalysis: session.imageAnalysis,
      inputType: session.inputType
    };
    
    // Registra o in√≠cio da gera√ß√£o
    const generationStartTime = Date.now();
    
    // Gera a carta
    let letterContent = '';
    try {
      letterContent = await contentGenerationService.generateConscienceLetter(userData);
    } catch (error) {
      log('Erro ao gerar carta:', error);
      
      // Tenta novamente com um prompt mais simples
      try {
        letterContent = await openaiService.generateConscienceLetter({
          name: session.name,
          challenge: session.challenge
        });
      } catch (retryError) {
        log('Erro na segunda tentativa de gerar carta:', retryError);
        
        // Usa uma carta gen√©rica em caso de falha
        letterContent = `*Carta de Consci√™ncia para ${session.name}*\n\n1. *Introdu√ß√£o Simb√≥lica:*\n\nCaro ${session.name},\n\nNa vasta imensid√£o do oceano empreendedor, o seu neg√≥cio √© como um farol de luz intensa, irradiando potencial e guiando aqueles √† sua volta. Assim como um farol que se eleva sobre as √°guas turbulentas, a alma do seu neg√≥cio ilumina o caminho para novas possibilidades e conquistas.\n\n2. *Perfil Comportamental:*\n\nAo navegar pelas ondas do seu perfil, √© evidente que voc√™ √© algu√©m que busca incessantemente seu ikigai, o ponto de interse√ß√£o entre o que voc√™ ama, no que √© bom, o que o mundo precisa e pelo que pode ser pago. Sua habilidade de comunicar-se com clareza e empatia √© not√°vel, mostrando que voc√™ entende a import√¢ncia de criar la√ßos genu√≠nos com seu p√∫blico.\n\nNo entanto, a busca por escalar as vendas, seu desafio atual, requer um equil√≠brio entre sua paix√£o e a necessidade de estruturar processos que garantam crescimento sustent√°vel.\n\n3. *Conselho de Ouro:*\n\n${session.name}, para escalar suas vendas, √© fundamental n√£o apenas ampliar sua base de clientes, mas tamb√©m consolidar a fidelidade daqueles que j√° confiam em sua marca. Considere aprofundar-se na personaliza√ß√£o de experi√™ncias, criando ofertas que ressoem pessoalmente com seus seguidores. Utilize feedbacks para refinar suas estrat√©gias e n√£o hesite em testar novos canais de venda que possam complementar suas pr√°ticas atuais. Lembre-se, a escalabilidade √© tanto sobre alavancar seus pontos fortes quanto sobre otimizar suas opera√ß√µes internas.\n\n4. *Sugest√£o de Ferramenta de IA:*\n\nPara enfrentar o desafio de escalar as vendas, recomendo que explore a utiliza√ß√£o de Intelig√™ncia Artificial para an√°lise de dados de clientes. Ferramentas de IA, como chatbots inteligentes e plataformas de CRM com capacidades de machine learning, podem ajudar a segmentar seu p√∫blico, identificar padr√µes de compra e prever comportamentos futuros. Isso n√£o apenas aprimorar√° suas estrat√©gias de marketing, mas tamb√©m fortalecer√° o relacionamento com seus clientes, oferecendo-lhes exatamente o que precisam, quando precisam.\n\n5. *P√≠lula de Inspira√ß√£o:*\n\nNo palco da vida, o empreendedor √© o ator,\nCom coragem, avan√ßa, sem temor,\nEscalar montanhas, cruzar o mar,\nCada desafio, uma chance de brilhar.\n\n${session.name}, com vis√£o e cora√ß√£o em sintonia,\nSeu farol ilumina o caminho, dia ap√≥s dia,\nQue a jornada seja de crescimento e florescer,\nE que suas conquistas sejam sempre de se enaltecer. ‚ú®\n\n6. *Conclus√£o Motivacional:*\n\n${session.name}, lembre-se de que a escalada √© um processo cont√≠nuo de aprendizagem e adapta√ß√£o. Permita-se ser guiado pela paix√£o que o impulsiona e pela vis√£o que o orienta. A jornada de escalar vendas √© uma dan√ßa entre estrat√©gia e inova√ß√£o, e voc√™ possui o talento e a determina√ß√£o necess√°rios para liderar com sucesso. Continue iluminando o caminho com sua luz √∫nica e nunca perca de vista o horizonte de possibilidades que se estende diante de voc√™.\n\nCom determina√ß√£o e entusiasmo, siga em frente! üöÄ\n\nCom os melhores votos de sucesso,\n\nConselheiro da Consci√™nc.IA`;
      }
    }
    
    // Envia a carta para o usu√°rio
    await sendConscienceLetter(userPhoneNumber, letterContent);
    
    // Atualiza o estado da sess√£o
    session.letterContent = letterContent;
    session.letterGeneratedAt = Date.now();
    session.state = CONVERSATION_STATES.LETTER_DELIVERED;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Envia mensagem de confirma√ß√£o e op√ß√µes
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "‚ú® *Sua Carta da Consci√™nc.IA foi entregue!* ‚ú®\n\nEspero que tenha gostado da sua Carta! üåü\n\nPara saber mais sobre como a IA pode transformar seu neg√≥cio e sua vida, conhe√ßa o Programa Consci√™nc.IA, de Renato Hilel e Nuno Arcanjo.\n\nVisite: https://www.floreon.app.br/conscienc-ia\n\nAproveite o evento MAPA DO LUCRO e n√£o deixe de conversar pessoalmente com os criadores do programa! üí´"
    );
    
    // Envia op√ß√µes de continuidade
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Posso ajudar com mais algo? Digite:\n\n*\"IA\"* para saber como a IA pode ajudar voc√™ hoje.\n*\"inspira√ß√£o\"* para outra inspira√ß√£o personalizada.\n*\"n√£o\"* para encerrar."
    );
  } catch (error) {
    log('Erro ao processar desafio:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao gerar sua carta. Por favor, tente novamente mais tarde."
    );
  }
}

/**
 * Envia a carta de consci√™ncia para o usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} letterContent - Conte√∫do da carta
 */
async function sendConscienceLetter(userPhoneNumber, letterContent) {
  try {
    // Envia a carta para o usu√°rio
    await whatsappService.sendTextMessage(userPhoneNumber, letterContent);
  } catch (error) {
    log('Erro ao enviar carta:', error);
    
    // Tenta enviar em partes menores em caso de erro
    try {
      const parts = letterContent.split('\n\n');
      for (const part of parts) {
        if (part.trim()) {
          await whatsappService.sendTextMessage(userPhoneNumber, part);
          // Pequeno atraso para evitar problemas de ordem
          await new Promise(resolve => setTimeout(resolve, 500));
        }
      }
    } catch (retryError) {
      log('Erro ao enviar carta em partes:', retryError);
    }
  }
}

/**
 * Processa comandos ap√≥s a entrega da carta
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} text - Texto do comando
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processCommand(userPhoneNumber, text, session) {
  try {
    const command = text.toLowerCase().trim();
    
    // Verifica se √© uma solicita√ß√£o de informa√ß√µes sobre o programa
    if (command.includes('programa') || command.includes('conscienc.ia') || 
        command.includes('mentor') || command.includes('renato') || 
        command.includes('nuno') || command.includes('arcanjo')) {
      
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "üåü O *Programa Consci√™nc.IA* foi criado por Renato Hilel e Nuno Arcanjo para ajudar voc√™ a escalar seu neg√≥cio, sua mentoria ou sua marca pessoal com autenticidade e IA estrat√©gica.\n\nVoc√™ pode se inscrever na lista de espera com benef√≠cios exclusivos pelo site:\n\nüîó https://www.floreon.app.br/conscienc-ia\n\nSe quiser conversar com um mentor humano agora, aproveite o evento MAPA DO LUCRO e n√£o deixe de conversar pessoalmente com os criadores do programa @renatohilel.oficial e @nunoarcanjo.poeta! üí´"
      );
      
      return;
    }
    
    // Processa comandos espec√≠ficos
    switch (command) {
      case COMMANDS.IA:
      case 'ia':
        await processIACommand(userPhoneNumber, session);
        break;
        
      case COMMANDS.INSPIRACAO:
      case 'inspira√ß√£o':
      case 'inspiracao':
        await processInspirationCommand(userPhoneNumber, session);
        break;
        
      case COMMANDS.NAO:
      case 'n√£o':
      case 'nao':
        await processEndCommand(userPhoneNumber, session);
        break;
        
      case COMMANDS.CARTA:
      case 'carta':
        // Verifica se j√° passou tempo suficiente para gerar outra carta
        const now = Date.now();
        const lastGeneration = session.letterGeneratedAt || 0;
        const hoursSinceLastGeneration = (now - lastGeneration) / (1000 * 60 * 60);
        
        if (hoursSinceLastGeneration < 24) {
          await whatsappService.sendTextMessage(
            userPhoneNumber,
            "Voc√™ j√° recebeu sua Carta da Consci√™nc.IA personalizada hoje! S√≥ √© poss√≠vel gerar uma carta a cada 24 horas.\n\nSe quiser mais insights personalizados, conhe√ßa o Programa Consci√™nc.IA:\n\nüîó https://www.floreon.app.br/conscienc-ia"
          );
        } else {
          // Reinicia o processo para gerar uma nova carta
          session.state = CONVERSATION_STATES.INITIAL;
          await sessionService.saveSession(userPhoneNumber, session);
          await startConversation(userPhoneNumber);
        }
        break;
        
      default:
        // Comando n√£o reconhecido
        await whatsappService.sendTextMessage(
          userPhoneNumber,
          "Desculpe, n√£o reconhe√ßo esse comando. Por favor, digite:\n\n*\"IA\"* para saber como a IA pode ajudar voc√™ hoje.\n*\"inspira√ß√£o\"* para outra inspira√ß√£o personalizada.\n*\"n√£o\"* para encerrar."
        );
    }
  } catch (error) {
    log('Erro ao processar comando:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu comando. Por favor, tente novamente."
    );
  }
}

/**
 * Processa o comando IA
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processIACommand(userPhoneNumber, session) {
  try {
    // Gera dicas de IA personalizadas
    let aiTips = '';
    try {
      aiTips = await openaiService.generateAITips({
        name: session.name,
        business: session.business,
        challenge: session.challenge
      });
    } catch (error) {
      log('Erro ao gerar dicas de IA:', error);
      
      // Usa dicas gen√©ricas em caso de falha
      aiTips = `Ol√° ${session.name || 'empreendedor(a)'},\n\nAqui est√£o algumas formas como a IA pode ajudar voc√™ hoje:\n\n1. *Automa√ß√£o de Marketing*: Use IA para criar e programar conte√∫do para redes sociais, segmentando seu p√∫blico de forma mais eficiente.\n\n2. *An√°lise de Dados*: Implemente ferramentas de IA para analisar o comportamento dos clientes e identificar padr√µes que podem aumentar suas vendas.\n\n3. *Atendimento ao Cliente*: Chatbots inteligentes podem responder perguntas frequentes 24/7, liberando seu tempo para tarefas estrat√©gicas.\n\n4. *Personaliza√ß√£o*: Utilize IA para criar experi√™ncias personalizadas para seus clientes, aumentando a fideliza√ß√£o.\n\n5. *Otimiza√ß√£o de Processos*: Identifique gargalos em seus processos internos com an√°lise preditiva.\n\nPara implementar estas estrat√©gias, recomendo come√ßar com uma ferramenta simples como o ChatGPT para criar conte√∫do, e gradualmente explorar solu√ß√µes mais espec√≠ficas para seu neg√≥cio.\n\nEspero que estas dicas ajudem a impulsionar seu crescimento!`;
    }
    
    // Envia as dicas para o usu√°rio
    await whatsappService.sendTextMessage(userPhoneNumber, aiTips);
    
    // Envia op√ß√µes novamente
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Posso ajudar com mais algo? Digite:\n\n*\"IA\"* para saber como a IA pode ajudar voc√™ hoje.\n*\"inspira√ß√£o\"* para outra inspira√ß√£o personalizada.\n*\"n√£o\"* para encerrar."
    );
  } catch (error) {
    log('Erro ao processar comando IA:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao gerar dicas de IA. Por favor, tente novamente mais tarde."
    );
  }
}

/**
 * Processa o comando inspira√ß√£o
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processInspirationCommand(userPhoneNumber, session) {
  try {
    // Gera inspira√ß√£o personalizada
    let inspiration = '';
    try {
      inspiration = await openaiService.generateInspiration({
        name: session.name,
        business: session.business,
        challenge: session.challenge
      });
    } catch (error) {
      log('Erro ao gerar inspira√ß√£o:', error);
      
      // Usa inspira√ß√£o gen√©rica em caso de falha
      inspiration = `‚ú® *Inspira√ß√£o para ${session.name || 'voc√™'}* ‚ú®\n\nNo oceano dos neg√≥cios, as ondas n√£o param,\nMas √© na persist√™ncia que os vencedores se destacam.\nCada desafio superado √© um passo √† frente,\nCada aprendizado, uma joia reluzente.\n\nSua jornada √© √∫nica, seu caminho √© seu,\nN√£o compare sua p√°gina 10 com o cap√≠tulo 20 de algu√©m.\nO sucesso n√£o √© destino, mas jornada constante,\nE voc√™ j√° provou ser resiliente e brilhante.\n\nHoje, permita-se sonhar mais alto,\nD√™ um passo al√©m, fa√ßa um novo salto.\nSua determina√ß√£o √© sua maior aliada,\nE seu potencial, uma for√ßa ainda n√£o totalmente explorada.\n\nLembre-se: grandes √°rvores crescem em sil√™ncio,\nE os maiores sucessos muitas vezes v√™m ap√≥s momentos de sil√™ncio.\nConfie em seu processo, honre sua caminhada,\nPois sua hist√≥ria de sucesso j√° est√° sendo forjada. üåü`;
    }
    
    // Envia a inspira√ß√£o para o usu√°rio
    await whatsappService.sendTextMessage(userPhoneNumber, inspiration);
    
    // Envia op√ß√µes novamente
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Posso ajudar com mais algo? Digite:\n\n*\"IA\"* para saber como a IA pode ajudar voc√™ hoje.\n*\"inspira√ß√£o\"* para outra inspira√ß√£o personalizada.\n*\"n√£o\"* para encerrar."
    );
  } catch (error) {
    log('Erro ao processar comando inspira√ß√£o:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao gerar inspira√ß√£o. Por favor, tente novamente mais tarde."
    );
  }
}

/**
 * Processa o comando de encerramento
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processEndCommand(userPhoneNumber, session) {
  try {
    // Envia mensagem de despedida
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      `Obrigado por usar o Conselheiro da Consci√™nc.IA, ${session.name || 'amigo(a)'}! üôè\n\nFoi um prazer ajudar voc√™ hoje. Lembre-se de que voc√™ pode voltar a qualquer momento enviando "Quero receber minha Carta!"\n\nAproveite o evento MAPA DO LUCRO e n√£o deixe de conhecer o Programa Consci√™nc.IA:\n\nüîó https://www.floreon.app.br/conscienc-ia\n\nDesejo muito sucesso em sua jornada! ‚ú®`
    );
    
    // N√£o altera o estado da sess√£o para permitir que o usu√°rio continue a conversa se desejar
  } catch (error) {
    log('Erro ao processar comando de encerramento:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao encerrar nossa conversa. Voc√™ pode simplesmente parar de responder ou enviar \"Quero receber minha Carta!\" para reiniciar quando desejar."
    );
  }
}
