import sessionService from '../services/sessionService.js';
import whatsappService from '../services/whatsappService.js';
import * as openaiService from '../services/openaiService.js';
import * as visionAnalysisService from '../services/visionAnalysisService.js';
import * as profileScraperService from '../services/profileScraperService.js';
import * as contentGenerationService from '../services/contentGenerationService.js';
import { log } from '../utils/logger.js';
import { isValidUrl, normalizeProfileUrl } from '../utils/validators.js';

// Estados da conversa
const CONVERSATION_STATES = {
  INITIAL: 'initial',
  WAITING_NAME: 'waiting_name',
  WAITING_BUSINESS: 'waiting_business',
  WAITING_PROFILE: 'waiting_profile',
  WAITING_CHALLENGE: 'waiting_challenge',
  GENERATING_LETTER: 'generating_letter',
  LETTER_DELIVERED: 'letter_delivered',
  WAITING_COMMAND: 'waiting_command'
};

// Comandos especiais
const COMMANDS = {
  IA: 'ia',
  INSPIRACAO: 'inspiracao',
  NAO: 'nao',
  CARTA: 'carta'
};

/**
 * Normaliza o texto removendo acentos, espa√ßos extras e convertendo para min√∫sculas
 * @param {string} text - Texto a ser normalizado
 * @returns {string} - Texto normalizado
 */
function normalizeText(text) {
  if (!text) return '';
  
  // Remove acentos
  const normalized = text.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
  
  // Remove espa√ßos extras e converte para min√∫sculas
  return normalized.toLowerCase().trim().replace(/\s+/g, ' ');
}

/**
 * Processa mensagens recebidas do webhook do WhatsApp
 * @param {Object} req - Objeto de requisi√ß√£o Express
 * @param {Object} res - Objeto de resposta Express
 */
export async function processMessage(req, res) {
  try {
    // Verifica se √© uma mensagem v√°lida
    if (!req.body || !req.body.entry || !req.body.entry[0] || !req.body.entry[0].changes || !req.body.entry[0].changes[0]) {
      return res.sendStatus(400);
    }

    const value = req.body.entry[0].changes[0].value;
    
    // Verifica se √© uma mensagem do WhatsApp
    if (!value || !value.messages || !value.messages[0]) {
      return res.sendStatus(200);
    }

    // Extrai dados da mensagem
    const message = value.messages[0];
    const userPhoneNumber = message.from;
    const messageId = message.id;
    
    // Marca a mensagem como lida
    await whatsappService.markMessageAsRead(messageId);

    // Obt√©m ou cria a sess√£o do usu√°rio
    let session = await sessionService.getSession(userPhoneNumber);
    
    if (!session) {
      session = {
        phoneNumber: userPhoneNumber,
        state: CONVERSATION_STATES.INITIAL,
        startTimestamp: Date.now()
      };
      await sessionService.saveSession(userPhoneNumber, session);
    }

    // Processa a mensagem com base no tipo
    if (message.type === 'text') {
      await handleTextMessage(userPhoneNumber, message.text.body, session);
    } else if (message.type === 'image') {
      await handleImageMessage(userPhoneNumber, message.image, session);
    } else {
      // Tipo de mensagem n√£o suportado
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, s√≥ posso processar mensagens de texto ou imagens. Por favor, envie seu desafio em formato de texto ou uma imagem do seu perfil."
      );
    }

    return res.sendStatus(200);
  } catch (error) {
    log('Erro ao processar mensagem:', error);
    return res.sendStatus(500);
  }
}

/**
 * Processa mensagens de texto
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} messageText - Texto da mensagem
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function handleTextMessage(userPhoneNumber, messageText, session) {
  try {
    const text = messageText.trim();
    const normalizedText = normalizeText(text);
    
    log(`Texto normalizado: "${normalizedText}"`);
    
    // Verifica se √© o gatilho de in√≠cio
    if (normalizedText.includes("quero receber") && normalizedText.includes("carta") || 
        normalizedText.includes("quero carta") || 
        normalizedText.includes("receber carta") || 
        normalizedText === "comecar" || 
        normalizedText === "iniciar") {
      
      log(`Gatilho de in√≠cio detectado de ${userPhoneNumber}: "${normalizedText}"`);
      
      // Reinicia a conversa
      session = {
        phoneNumber: userPhoneNumber,
        state: CONVERSATION_STATES.INITIAL,
        startTimestamp: Date.now()
      };
      await sessionService.saveSession(userPhoneNumber, session);
      await startConversation(userPhoneNumber);
      return;
    }
    
    // Processa a mensagem com base no estado atual da conversa
    switch (session.state) {
      case CONVERSATION_STATES.INITIAL:
        await startConversation(userPhoneNumber);
        break;
        
      case CONVERSATION_STATES.WAITING_NAME:
        await processName(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.WAITING_BUSINESS:
        await processBusiness(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.WAITING_PROFILE:
        await processProfile(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.WAITING_CHALLENGE:
        await processChallenge(userPhoneNumber, text, session);
        break;
        
      case CONVERSATION_STATES.LETTER_DELIVERED:
      case CONVERSATION_STATES.WAITING_COMMAND:
        await processCommand(userPhoneNumber, text, session);
        break;
        
      default:
        // Estado desconhecido, reinicia a conversa
        await whatsappService.sendTextMessage(
          userPhoneNumber,
          "Algo deu errado, vamos come√ßar novamente? Envie \"Quero receber a minha Carta!\" para reiniciar o processo."
        );
        session.state = CONVERSATION_STATES.INITIAL;
        await sessionService.saveSession(userPhoneNumber, session);
    }
  } catch (error) {
    log('Erro ao processar mensagem de texto:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro inesperado. Por favor, tente novamente mais tarde ou envie \"Quero receber a minha Carta!\" para reiniciar o processo."
    );
  }
}

/**
 * Processa mensagens de imagem
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {Object} imageData - Dados da imagem
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function handleImageMessage(userPhoneNumber, imageData, session) {
  try {
    // Verifica se est√° no estado correto para receber imagens
    if (session.state !== CONVERSATION_STATES.WAITING_PROFILE) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, n√£o estou esperando uma imagem neste momento. Por favor, siga as instru√ß√µes anteriores ou envie \"Quero receber a minha Carta!\" para reiniciar."
      );
      return;
    }
    
    // Obt√©m a URL da imagem
    const mediaId = imageData.id;
    const imageUrl = await whatsappService.getMediaUrl(mediaId);
    
    if (!imageUrl) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, n√£o consegui processar sua imagem. Por favor, tente enviar novamente ou envie um link do seu perfil."
      );
      return;
    }
    
    // Classifica o tipo de imagem (screenshot ou foto)
    const imageType = await visionAnalysisService.classifyImageType(imageUrl);
    
    // Analisa a imagem
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Obrigado! Vou analisar sua imagem. Isso pode levar alguns instantes..."
    );
    
    let imageAnalysis = '';
    try {
      imageAnalysis = await visionAnalysisService.analyzeImageFromUrl(imageUrl);
    } catch (error) {
      log('Erro ao analisar imagem:', error);
      imageAnalysis = '';
    }
    
    // Atualiza a sess√£o com os dados da imagem
    session.imageUrl = imageUrl;
    session.imageAnalysis = imageAnalysis;
    session.inputType = imageType;
    session.state = CONVERSATION_STATES.WAITING_CHALLENGE;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o desafio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Agora me diga, com sinceridade...\n\nüåê *Se voc√™ pudesse resolver apenas UM desafio neste momento*,\nqual seria esse desafio que, ao ser superado, traria os resultados que voc√™ mais deseja?\n\n(Responda com apenas uma frase)"
    );
  } catch (error) {
    log('Erro ao processar mensagem de imagem:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar sua imagem. Por favor, tente enviar um link do seu perfil em vez disso ou envie \"Quero receber a minha Carta!\" para reiniciar."
    );
  }
}

/**
 * Inicia a conversa com o usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 */
async function startConversation(userPhoneNumber) {
  try {
    log(`Iniciando conversa para ${userPhoneNumber}`);
    
    // Mensagem de boas-vindas
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Ol√°! üëã Bem-vindo(a) ao *Conselheiro Consci√™nc.IA* do evento MAPA DO LUCRO!\n\nSou um assistente virtual criado para gerar sua *Carta da Consci√™nc.IA* personalizada ‚Äî uma an√°lise √∫nica, emocional e estrat√©gica baseada no seu perfil e no momento que voc√™ est√° vivendo.\n\nPara come√ßar, preciso conhecer voc√™ melhor.\nComo gostaria de ser chamado(a)? üôÇ"
    );
    
    // Atualiza o estado da sess√£o
    const session = await sessionService.getSession(userPhoneNumber);
    if (session) {
      session.state = CONVERSATION_STATES.WAITING_NAME;
      await sessionService.saveSession(userPhoneNumber, session);
    } else {
      // Cria uma nova sess√£o se n√£o existir
      const newSession = {
        phoneNumber: userPhoneNumber,
        state: CONVERSATION_STATES.WAITING_NAME,
        startTimestamp: Date.now()
      };
      await sessionService.saveSession(userPhoneNumber, newSession);
    }
  } catch (error) {
    log('Erro ao iniciar conversa:', error);
    
    // Tenta enviar uma mensagem simplificada em caso de erro
    try {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Ol√°! Bem-vindo(a) ao Conselheiro Consci√™nc.IA. Como gostaria de ser chamado(a)?"
      );
    } catch (retryError) {
      log('Erro na segunda tentativa de iniciar conversa:', retryError);
    }
  }
}

/**
 * Processa o nome do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} name - Nome do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processName(userPhoneNumber, name, session) {
  try {
    // Valida o nome
    if (!name || name.length < 2) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Por favor, informe um nome v√°lido."
      );
      return;
    }
    
    // Atualiza a sess√£o com o nome
    session.name = name;
    session.state = CONVERSATION_STATES.WAITING_BUSINESS;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o neg√≥cio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      `Obrigado, ${name}! üòä\n\nPara uma melhor experi√™ncia, gostaria de me contar qual √© o Nicho do seu Neg√≥cio ou trabalho atual e o seu papel nele?\n\n*(Caso n√£o queira informar agora, digite "pular" para continuar.)*`
    );
  } catch (error) {
    log('Erro ao processar nome:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu nome. Por favor, tente novamente ou envie \"Quero receber a minha Carta!\" para reiniciar."
    );
  }
}

/**
 * Processa o neg√≥cio do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} business - Neg√≥cio do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processBusiness(userPhoneNumber, business, session) {
  try {
    // Verifica se o usu√°rio quer pular esta etapa
    if (business.toLowerCase() === "pular") {
      session.business = null;
    } else {
      session.business = business;
    }
    
    // Atualiza a sess√£o
    session.state = CONVERSATION_STATES.WAITING_PROFILE;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o perfil
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Perfeito! Agora, para gerar sua Carta da Consci√™nc.IA personalizada, preciso analisar seu perfil digital.\n\nVoc√™ escolhe como prefere se apresentar:\n\n1Ô∏è‚É£ Envie um **print do seu perfil social** (Instagram ou LinkedIn) para uma leitura mais profunda.\n2Ô∏è‚É£ Envie **sua foto de perfil** (uma imagem que te represente hoje).\n3Ô∏è‚É£ Ou apenas me diga seu @ (ex: @renatohilel.oficial) para uma leitura objetiva.\n\nüìù Envie agora da forma que preferir!"
    );
  } catch (error) {
    log('Erro ao processar neg√≥cio:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar sua informa√ß√£o. Por favor, tente novamente ou envie \"Quero receber a minha Carta!\" para reiniciar."
    );
  }
}

/**
 * Processa o perfil do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} profileInput - Input do perfil (URL ou username)
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processProfile(userPhoneNumber, profileInput, session) {
  try {
    // Normaliza a entrada do perfil
    let profileUrl = profileInput;
    let inputType = 'username';
    
    // Verifica se √© uma URL v√°lida
    if (isValidUrl(profileInput)) {
      profileUrl = profileInput;
      inputType = 'link';
    } else if (profileInput.startsWith('@')) {
      // √â um username do Instagram
      profileUrl = normalizeProfileUrl(profileInput);
    }
    
    // Atualiza a sess√£o com os dados do perfil
    session.profileUrl = profileUrl;
    session.inputType = inputType;
    
    // Tenta extrair dados do perfil
    let profileData = null;
    try {
      profileData = await profileScraperService.scrapeProfile(profileUrl);
      session.profileData = profileData;
    } catch (error) {
      log('Erro ao extrair dados do perfil:', error);
    }
    
    // Tenta analisar o perfil
    let profileAnalysis = '';
    try {
      profileAnalysis = await profileScraperService.analyzeProfileWithAI(profileUrl);
      session.profileAnalysis = profileAnalysis;
    } catch (error) {
      log('Erro ao analisar perfil:', error);
    }
    
    // Atualiza o estado da sess√£o
    session.state = CONVERSATION_STATES.WAITING_CHALLENGE;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Solicita o desafio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Agora me diga, com sinceridade...\n\nüåê *Se voc√™ pudesse resolver apenas UM desafio neste momento*,\nqual seria esse desafio que, ao ser superado, traria os resultados que voc√™ mais deseja?\n\n(Responda com apenas uma frase)"
    );
  } catch (error) {
    log('Erro ao processar perfil:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu perfil. Por favor, tente novamente ou envie \"Quero receber a minha Carta!\" para reiniciar."
    );
  }
}

/**
 * Processa o desafio do usu√°rio
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} challenge - Desafio do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processChallenge(userPhoneNumber, challenge, session) {
  try {
    // Valida o desafio
    if (!challenge || challenge.length < 2) {
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Por favor, informe um desafio v√°lido, mesmo que seja em apenas uma palavra."
      );
      return;
    }
    
    // Atualiza a sess√£o com o desafio
    session.challenge = challenge;
    session.state = CONVERSATION_STATES.GENERATING_LETTER;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Informa que est√° gerando a carta
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "‚è≥ Estou analisando suas informa√ß√µes e preparando sua Carta da Consci√™nc.IA‚Ä¶\nIsso pode levar alguns instantes...\n\nüåü Sinta-se confort√°vel. A magia est√° acontecendo."
    );
    
    // Gera a carta de consci√™ncia
    const userData = {
      name: session.name || 'Amigo',
      business: session.business || '',
      challenge: session.challenge || '',
      profileUrl: session.profileUrl || '',
      profileData: session.profileData || null,
      profileAnalysis: session.profileAnalysis || '',
      imageAnalysis: session.imageAnalysis || '',
      inputType: session.inputType || 'text'
    };
    
    // Registra o in√≠cio da gera√ß√£o
    const generationStartTime = Date.now();
    
    // Gera a carta
    let letterContent = '';
    try {
      letterContent = await contentGenerationService.generateConscienceLetter(userData);
    } catch (error) {
      log('Erro ao gerar carta:', error);
      
      // Tenta novamente com um prompt mais simples
      try {
        letterContent = await openaiService.generateConscienceLetter({
          name: session.name || 'Amigo',
          challenge: session.challenge || ''
        });
      } catch (retryError) {
        log('Erro na segunda tentativa de gerar carta:', retryError);
        
        // Usa uma carta gen√©rica em caso de falha
        letterContent = `*Carta de Consci√™ncia para ${session.name || 'Amigo'}*\n\nSua jornada √© √∫nica e seu desafio atual "${session.challenge || 'que voc√™ enfrenta'}" revela muito sobre seu momento. Confie em sua intui√ß√£o e capacidade de supera√ß√£o. O caminho √† frente pode parecer desafiador, mas voc√™ tem todos os recursos internos necess√°rios para avan√ßar.\n\nSua presen√ßa digital revela uma pessoa com grande potencial. Continue focando em seus objetivos e lembre-se de celebrar cada pequena vit√≥ria.\n\nCom carinho,\nConsci√™nc.IA`;
      }
    }
    
    // Registra o tempo de gera√ß√£o
    const generationTime = (Date.now() - generationStartTime) / 1000;
    log(`Carta gerada em ${generationTime} segundos`);
    
    // Atualiza a sess√£o com a carta
    session.letter = letterContent;
    session.state = CONVERSATION_STATES.LETTER_DELIVERED;
    await sessionService.saveSession(userPhoneNumber, session);
    
    // Envia a carta para o usu√°rio em partes se for muito longa
    const maxPartLength = 1000; // Limite de caracteres por mensagem
    
    if (letterContent.length <= maxPartLength) {
      // Envia a carta em uma √∫nica mensagem
      await whatsappService.sendTextMessage(userPhoneNumber, letterContent);
    } else {
      // Divide a carta em partes usando quebras naturais, sem numera√ß√£o
      let remainingContent = letterContent;
      
      while (remainingContent.length > 0) {
        // Encontra um ponto de quebra natural adequado
        let breakPoint = maxPartLength;
        if (remainingContent.length > maxPartLength) {
          // Procura por quebras naturais: se√ß√µes marcadas com "---", par√°grafos, ou pontua√ß√£o
          const sectionBreak = remainingContent.indexOf('\n---\n', 0);
          if (sectionBreak > 0 && sectionBreak < maxPartLength) {
            // Prioriza quebras de se√ß√£o se estiverem dentro do limite
            breakPoint = sectionBreak + 5; // Inclui o marcador "---" e as quebras de linha
          } else {
            // Procura por pontua√ß√£o seguida de quebra de linha
            const lastPeriodNewline = remainingContent.lastIndexOf('.\n', maxPartLength);
            const lastQuestionNewline = remainingContent.lastIndexOf('?\n', maxPartLength);
            const lastExclamationNewline = remainingContent.lastIndexOf('!\n', maxPartLength);
            
            // Procura por pontua√ß√£o simples
            const lastPeriod = remainingContent.lastIndexOf('.', maxPartLength);
            const lastQuestion = remainingContent.lastIndexOf('?', maxPartLength);
            const lastExclamation = remainingContent.lastIndexOf('!', maxPartLength);
            const lastNewLine = remainingContent.lastIndexOf('\n\n', maxPartLength);
            
            // Encontra o √∫ltimo ponto de quebra v√°lido, priorizando pontua√ß√£o com quebra de linha
            const possibleBreaks = [
              lastPeriodNewline, lastQuestionNewline, lastExclamationNewline,
              lastNewLine, lastPeriod, lastQuestion, lastExclamation
            ].filter(index => index > 0).sort((a, b) => b - a);
            
            if (possibleBreaks.length > 0) {
              // Adiciona 1 ou 2 caracteres dependendo do tipo de quebra
              const breakIndex = possibleBreaks[0];
              if ([lastPeriodNewline, lastQuestionNewline, lastExclamationNewline].includes(breakIndex)) {
                breakPoint = breakIndex + 2; // Inclui o caractere de pontua√ß√£o e a quebra de linha
              } else if (breakIndex === lastNewLine) {
                breakPoint = breakIndex + 2; // Inclui as duas quebras de linha
              } else {
                breakPoint = breakIndex + 1; // Inclui apenas o caractere de pontua√ß√£o
              }
            } else {
              // Se n√£o encontrou um ponto de quebra adequado, procura por um espa√ßo
              const lastSpace = remainingContent.lastIndexOf(' ', maxPartLength);
              if (lastSpace > 0) {
                breakPoint = lastSpace + 1;
              }
            }
          }
        }
        
        // Extrai a parte atual sem adicionar numera√ß√£o
        const currentPart = remainingContent.substring(0, breakPoint);
        
        // Envia a parte atual sem indicador de parte
        await whatsappService.sendTextMessage(userPhoneNumber, currentPart);
        
        // Atualiza o conte√∫do restante
        remainingContent = remainingContent.substring(breakPoint);
        
        // Pequeno delay entre as mensagens para garantir a ordem correta
        if (remainingContent.length > 0) {
          await new Promise(resolve => setTimeout(resolve, 1500));
        }
      }
    }
    
    // Envia mensagem de follow-up ap√≥s a carta
    await new Promise(resolve => setTimeout(resolve, 2000));
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "‚ú® *Sua Carta da Consci√™nc.IA foi entregue!* ‚ú®\n\nEspero que ela tenha trazido insights valiosos para voc√™.\n\n*O que voc√™ gostaria de fazer agora?*\n\n1Ô∏è‚É£ Digite *IA* para saber mais sobre como a Intelig√™ncia Artificial pode transformar seu neg√≥cio\n\n2Ô∏è‚É£ Digite *Inspira√ß√£o* para receber uma dose extra de motiva√ß√£o\n\n3Ô∏è‚É£ Digite *Carta* para receber sua carta novamente\n\n4Ô∏è‚É£ Digite *N√£o* para encerrar nossa conversa"
    );
  } catch (error) {
    log('Erro ao processar desafio:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao gerar sua carta. Por favor, tente novamente mais tarde ou envie \"Quero receber a minha Carta!\" para reiniciar o processo."
    );
  }
}

/**
 * Processa comandos ap√≥s a entrega da carta
 * @param {string} userPhoneNumber - N√∫mero de telefone do usu√°rio
 * @param {string} command - Comando do usu√°rio
 * @param {Object} session - Dados da sess√£o do usu√°rio
 */
async function processCommand(userPhoneNumber, command, session) {
  try {
    const normalizedCommand = normalizeText(command);
    
    // Processa o comando
    if (normalizedCommand.includes(COMMANDS.IA) || normalizedCommand.includes('ia')) {
      // Informa√ß√µes sobre IA
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "ü§ñ *O Poder da IA nos Neg√≥cios* ü§ñ\n\nA Intelig√™ncia Artificial est√° revolucionando a forma como os neg√≥cios operam e se conectam com seus clientes.\n\nNo Programa Consci√™nc.IA, Renato Hilel e Nuno Arcanjo mostram como usar a IA para:\n\n‚úÖ Automatizar tarefas repetitivas\n‚úÖ Personalizar a comunica√ß√£o com clientes\n‚úÖ Analisar dados e identificar oportunidades\n‚úÖ Criar conte√∫do de alta qualidade em menos tempo\n‚úÖ Escalar opera√ß√µes sem aumentar proporcionalmente os custos\n\nPara saber mais, acesse: https://www.floreon.app.br/conscienc-ia"
      );
      
      // Atualiza o estado da sess√£o
      session.state = CONVERSATION_STATES.WAITING_COMMAND;
      await sessionService.saveSession(userPhoneNumber, session);
    } else if (normalizedCommand.includes(COMMANDS.INSPIRACAO) || normalizedCommand.includes('inspiracao')) {
      // Mensagem inspiradora
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "‚ú® *Inspira√ß√£o do Dia* ‚ú®\n\n\"O maior risco n√£o √© arriscar demais, √© arriscar de menos. No mundo atual, a maior falha √© n√£o usar suas capacidades ao m√°ximo, n√£o arriscar o suficiente.\"\n\n- Renato Hilel\n\nLembre-se: Voc√™ tem potencial ilimitado. A tecnologia e a IA s√£o apenas ferramentas - o verdadeiro poder est√° em como voc√™ as utiliza para amplificar seu impacto e realizar sua vis√£o √∫nica.\n\nPara mais inspira√ß√£o, siga @renatohilel.oficial e @nunoarcanjo.portal"
      );
      
      // Atualiza o estado da sess√£o
      session.state = CONVERSATION_STATES.WAITING_COMMAND;
      await sessionService.saveSession(userPhoneNumber, session);
    } else if (normalizedCommand.includes(COMMANDS.CARTA) || normalizedCommand.includes('carta')) {
      // Reenvia a carta
      if (session.letter) {
        await whatsappService.sendTextMessage(
          userPhoneNumber,
          session.letter
        );
      } else {
        await whatsappService.sendTextMessage(
          userPhoneNumber,
          "Desculpe, n√£o consegui encontrar sua carta. Por favor, envie \"Quero receber a minha Carta!\" para gerar uma nova."
        );
      }
      
      // Atualiza o estado da sess√£o
      session.state = CONVERSATION_STATES.WAITING_COMMAND;
      await sessionService.saveSession(userPhoneNumber, session);
    } else if (normalizedCommand.includes(COMMANDS.NAO) || normalizedCommand.includes('nao')) {
      // Encerra a conversa
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "‚ú® *Sua Carta da Consci√™nc.IA foi entregue!* ‚ú®Espero que tenha gostado da sua Carta! üåü Para saber mais sobre como a IA pode transformar seu neg√≥cio e sua vida, conhe√ßa o Programa Consci√™nc.IA, de Renato Hilel e Nuno Arcanjo. Visite: https://www.floreon.app.br/conscienc-ia. Aproveite o evento MAPA DO LUCRO e n√£o deixe de conversar pessoalmente com os criadores do programa! üí´‚Äù
 ‚ú®"
      );
      
      // Atualiza o estado da sess√£o
      session.state = CONVERSATION_STATES.INITIAL;
      await sessionService.saveSession(userPhoneNumber, session);
    } else {
      // Comando n√£o reconhecido
      await whatsappService.sendTextMessage(
        userPhoneNumber,
        "Desculpe, n√£o entendi seu comando. Por favor, escolha uma das op√ß√µes:\n\n1Ô∏è‚É£ Digite *IA* para saber mais sobre como a Intelig√™ncia Artificial pode transformar seu neg√≥cio\n\n2Ô∏è‚É£ Digite *Inspira√ß√£o* para receber uma dose extra de motiva√ß√£o\n\n3Ô∏è‚É£ Digite *Carta* para receber sua carta novamente\n\n4Ô∏è‚É£ Digite *N√£o* para encerrar nossa conversa\n\nOu envie \"Quero receber a minha Carta!\" para reiniciar o processo."
      );
    }
  } catch (error) {
    log('Erro ao processar comando:', error);
    
    // Envia mensagem de erro para o usu√°rio
    await whatsappService.sendTextMessage(
      userPhoneNumber,
      "Desculpe, ocorreu um erro ao processar seu comando. Por favor, tente novamente ou envie \"Quero receber a minha Carta!\" para reiniciar o processo."
    );
  }
}

/**
 * Verifica o webhook do WhatsApp
 * @param {Object} req - Objeto de requisi√ß√£o Express
 * @param {Object} res - Objeto de resposta Express
 */
export function verifyWebhook(req, res) {
  try {
    const mode = req.query['hub.mode'];
    const token = req.query['hub.verify_token'];
    const challenge = req.query['hub.challenge'];
    
    // Verifica o token
    if (whatsappService.verifyWebhook(mode, token)) {
      return res.status(200).send(challenge);
    }
    
    return res.sendStatus(403);
  } catch (error) {
    log('Erro ao verificar webhook:', error);
    return res.sendStatus(500);
  }
}

export default {
  processMessage,
  verifyWebhook
};
